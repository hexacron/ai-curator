import json
import os
from datetime import datetime

def generate_website():
    """Generates an HTML website from the repository data."""
    
    cache_file = 'cache.json'
    if not os.path.exists(cache_file):
        print(f"❌ {cache_file} not found. Skipping website generation.")
        return

    with open(cache_file, 'r', encoding='utf-8') as f:
        data = json.load(f)

    repos = data.get('repositories', [])
    if not repos:
        print("No repositories found in cache. Website will be empty.")

    # Sort repositories by stars in descending order
    repos.sort(key=lambda r: r.get('stars', 0), reverse=True)

    # Create the 'docs' directory if it doesn't exist
    if not os.path.exists('docs'):
        os.makedirs('docs')

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")

    html_content = f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>AI & OSINT Curator</title>
        <script src="https://cdn.tailwindcss.com"></script>
    </head>
    <body class="bg-gray-50 font-sans">
        <div class="container mx-auto px-4 py-8">
            <header class="text-center mb-10">
                <h1 class="text-5xl font-bold text-gray-800">AI & OSINT Repository Curator</h1>
                <p class="text-gray-500 mt-2">A curated list of top-tier projects in AI, OSINT, and Cybersecurity.</p>
                <p class="text-sm text-gray-400 mt-1">Last updated: {timestamp}</p>
            </header>
            <main class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    """

    for repo in repos:
        # Create topic badges
        topics_html = ''.join([f'<span class="inline-block bg-blue-100 text-blue-800 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded-full">{topic}</span>' for topic in repo.get('topics', [])[:5]])
        
        html_content += f"""
        <div class="bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-lg transition-shadow duration-300 ease-in-out p-6 flex flex-col">
            <div class="flex-grow">
                <h2 class="text-2xl font-bold text-gray-900 mb-2">
                    <a href="{repo['html_url']}" target="_blank" class="hover:text-blue-600 transition-colors">{repo['name']}</a>
                </h2>
                <p class="text-gray-600 mb-4 h-20 overflow-hidden">{repo.get('description', 'No description available.')}</p>
            </div>
            <div class="mt-4">
                <div class="flex justify-between items-center text-sm text-gray-500 mb-4">
                    <span class="font-semibold">⭐ {repo.get('stars', 0):,}</span>
                    <span class="font-semibold text-purple-600">{repo.get('language', 'N/A')}</span>
                    <span>Updated: {repo.get('last_updated', 'N/A')}</span>
                </div>
                <div class="h-12 overflow-y-auto">
                    {topics_html}
                </div>
            </div>
        </div>
        """

    html_content += """
            </main>
            <footer class="text-center mt-12 text-gray-400">
                <p>Generated by AI Repository Curator | <a href="https://github.com/hexacron/ai-curator" class="hover:text-blue-500">View on GitHub</a></p>
            </footer>
        </div>
    </body>
    </html>
    """

    # Write the website to the /docs folder
    with open('docs/index.html', 'w', encoding='utf-8') as f:
        f.write(html_content)

    print("✅ Successfully generated website at docs/index.html")

if __name__ == "__main__":
    generate_website()
