[
  {
    "name": "sherlock",
    "full_name": "sherlock-project/sherlock",
    "url": "https://github.com/sherlock-project/sherlock",
    "description": "Hunt down social media accounts by username across social networks",
    "stars": 66371,
    "language": "Python",
    "updated": "2025-06-30",
    "topics": [
      "cli",
      "cti",
      "cybersecurity",
      "forensics",
      "hacktoberfest",
      "information-gathering",
      "infosec",
      "linux",
      "osint",
      "pentesting",
      "python",
      "python3",
      "reconnaissance",
      "redteam",
      "sherlock",
      "tools"
    ]
  },
  {
    "name": "web-check",
    "full_name": "Lissy93/web-check",
    "url": "https://github.com/Lissy93/web-check",
    "description": "\ud83d\udd75\ufe0f\u200d\u2642\ufe0f All-in-one OSINT tool for analysing any website",
    "stars": 25377,
    "language": "TypeScript",
    "updated": "2025-06-30",
    "topics": [
      "osint",
      "privacy",
      "security",
      "security-tools",
      "sysadmin"
    ]
  },
  {
    "name": "awesome-osint",
    "full_name": "jivoi/awesome-osint",
    "url": "https://github.com/jivoi/awesome-osint",
    "description": ":scream: A curated list of amazingly awesome OSINT",
    "stars": 21794,
    "language": null,
    "updated": "2025-06-30",
    "topics": [
      "awesome-list",
      "osint",
      "website"
    ]
  },
  {
    "name": "h4cker",
    "full_name": "The-Art-of-Hacking/h4cker",
    "url": "https://github.com/The-Art-of-Hacking/h4cker",
    "description": "This repository is primarily maintained by Omar Santos (@santosomar) and includes thousands of resources related to ethical hacking, bug bounties, digital forensics and incident response (DFIR), artificial intelligence security, vulnerability research, exploit development, reverse engineering, and more.",
    "stars": 21690,
    "language": "Jupyter Notebook",
    "updated": "2025-06-30",
    "topics": [
      "ai",
      "ai-security",
      "artificial-intelligence",
      "awesome-list",
      "awesome-lists",
      "cybersecurity",
      "ethical-hacking",
      "exploit",
      "exploit-development",
      "exploits",
      "hacker",
      "hackers",
      "hacking",
      "hacking-series",
      "penetration-testing",
      "training",
      "vulnerability",
      "vulnerability-assessment",
      "vulnerability-identification",
      "vulnerability-management"
    ]
  },
  {
    "name": "SingleFile",
    "full_name": "gildas-lormeau/SingleFile",
    "url": "https://github.com/gildas-lormeau/SingleFile",
    "description": "Web Extension for saving a faithful copy of a complete web page in a single HTML file",
    "stars": 18560,
    "language": "JavaScript",
    "updated": "2025-06-30",
    "topics": [
      "annotations",
      "archive",
      "archiver",
      "auto-save",
      "browser",
      "chrome",
      "chrome-extension",
      "cli",
      "firefox",
      "firefox-addon",
      "javascript",
      "offline-reading",
      "osint",
      "puppeteer",
      "screenshot",
      "selenium",
      "self-extracting",
      "self-extracting-zip",
      "snapshot",
      "web-clipper"
    ]
  },
  {
    "name": "GHunt",
    "full_name": "mxrch/GHunt",
    "url": "https://github.com/mxrch/GHunt",
    "description": "\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Offensive Google framework.",
    "stars": 16635,
    "language": "Python",
    "updated": "2025-06-30",
    "topics": [
      "google",
      "hideandsec",
      "osint"
    ]
  },
  {
    "name": "twint",
    "full_name": "twintproject/twint",
    "url": "https://github.com/twintproject/twint",
    "description": "An advanced Twitter scraping & OSINT tool written in Python that doesn't use Twitter's API, allowing you to scrape a user's followers, following, Tweets and more while evading most API limitations.",
    "stars": 16133,
    "language": "Python",
    "updated": "2025-06-30",
    "topics": [
      "elasticsearch",
      "kibana",
      "osint",
      "python",
      "scrape",
      "scrape-followers",
      "scrape-following",
      "scrape-likes",
      "tweep",
      "tweets",
      "twint",
      "twitter"
    ]
  },
  {
    "name": "maigret",
    "full_name": "soxoj/maigret",
    "url": "https://github.com/soxoj/maigret",
    "description": "\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Collect a dossier on a person by username from thousands of sites",
    "stars": 15522,
    "language": "Python",
    "updated": "2025-06-30",
    "topics": [
      "blueteam",
      "cybersecurity",
      "identification",
      "investigation",
      "namechecker",
      "open-source",
      "osint",
      "osint-framework",
      "osint-python",
      "parsing",
      "python",
      "python3",
      "redteam",
      "scraping",
      "sherlock",
      "social-network",
      "socmint",
      "username",
      "username-checker",
      "username-search"
    ]
  },
  {
    "name": "spiderfoot",
    "full_name": "smicallef/spiderfoot",
    "url": "https://github.com/smicallef/spiderfoot",
    "description": "SpiderFoot automates OSINT for threat intelligence and mapping your attack surface.",
    "stars": 14712,
    "language": "Python",
    "updated": "2025-06-30",
    "topics": [
      "attacksurface",
      "cti",
      "cybersecurity",
      "footprinting",
      "hacking",
      "information-gathering",
      "information-security",
      "infosec",
      "intelligence-gathering",
      "osint",
      "osint-framework",
      "osint-reconnaissance",
      "osint-tool",
      "pentesting",
      "python",
      "recon",
      "security-tools",
      "threat-intelligence",
      "threatintel"
    ]
  },
  {
    "name": "phoneinfoga",
    "full_name": "sundowndev/phoneinfoga",
    "url": "https://github.com/sundowndev/phoneinfoga",
    "description": "Information gathering framework for phone numbers",
    "stars": 14509,
    "language": "Go",
    "updated": "2025-06-30",
    "topics": [
      "agregation",
      "footprint",
      "information-gathering",
      "investigation",
      "open-source-intelligence",
      "osint",
      "phone",
      "phone-number",
      "reconnaissance",
      "reputation"
    ]
  },
  {
    "name": "amass",
    "full_name": "owasp-amass/amass",
    "url": "https://github.com/owasp-amass/amass",
    "description": "In-depth attack surface mapping and asset discovery",
    "stars": 13180,
    "language": "Go",
    "updated": "2025-06-30",
    "topics": [
      "attack-surfaces",
      "dns",
      "enumeration",
      "go",
      "golang",
      "information-gathering",
      "maltego",
      "network-security",
      "osint",
      "osint-reconnaissance",
      "owasp",
      "recon",
      "subdomain"
    ]
  },
  {
    "name": "theHarvester",
    "full_name": "laramies/theHarvester",
    "url": "https://github.com/laramies/theHarvester",
    "description": "E-mails, subdomains and names Harvester - OSINT ",
    "stars": 12917,
    "language": "Python",
    "updated": "2025-06-30",
    "topics": [
      "blueteam",
      "discovery",
      "emails",
      "information-gathering",
      "osint",
      "python",
      "recon",
      "reconnaissance",
      "redteam",
      "subdomain-enumeration"
    ]
  },
  {
    "name": "social-analyzer",
    "full_name": "qeeqbox/social-analyzer",
    "url": "https://github.com/qeeqbox/social-analyzer",
    "description": "API, CLI, and Web App for analyzing and finding a person's profile in 1000 social media \\ websites",
    "stars": 12550,
    "language": "JavaScript",
    "updated": "2025-06-30",
    "topics": [
      "analysis",
      "analyzer",
      "cli",
      "information-gathering",
      "javascript",
      "nodejs",
      "nodejs-cli",
      "osint",
      "pentest",
      "pentesting",
      "person-profile",
      "profile",
      "python",
      "reconnaissance",
      "security-tools",
      "social-analyzer",
      "social-media",
      "sosint",
      "username"
    ]
  },
  {
    "name": "subfinder",
    "full_name": "projectdiscovery/subfinder",
    "url": "https://github.com/projectdiscovery/subfinder",
    "description": "Fast passive subdomain enumeration tool.",
    "stars": 11884,
    "language": "Go",
    "updated": "2025-06-30",
    "topics": [
      "bugbounty",
      "hacking",
      "osint",
      "reconnaissance",
      "subdomain-enumeration",
      "subdomains"
    ]
  },
  {
    "name": "Photon",
    "full_name": "s0md3v/Photon",
    "url": "https://github.com/s0md3v/Photon",
    "description": "Incredibly fast crawler designed for OSINT.",
    "stars": 11672,
    "language": "Python",
    "updated": "2025-06-30",
    "topics": [
      "crawler",
      "information-gathering",
      "osint",
      "python",
      "spider"
    ]
  },
  {
    "name": "Osintgram",
    "full_name": "Datalux/Osintgram",
    "url": "https://github.com/Datalux/Osintgram",
    "description": "Osintgram is a OSINT tool on Instagram. It offers an interactive shell to perform analysis on Instagram account of any users by its nickname",
    "stars": 10948,
    "language": "Python",
    "updated": "2025-06-30",
    "topics": [
      "analysis",
      "hacking",
      "information-gathering",
      "instagram",
      "instagram-account",
      "instagram-api",
      "nickname",
      "osint",
      "osint-python",
      "penetration-testing",
      "python",
      "python3",
      "tool"
    ]
  },
  {
    "name": "instaloader",
    "full_name": "instaloader/instaloader",
    "url": "https://github.com/instaloader/instaloader",
    "description": "Download pictures (or videos) along with their captions and other metadata from Instagram.",
    "stars": 10078,
    "language": "Python",
    "updated": "2025-06-30",
    "topics": [
      "downloader",
      "instagram",
      "instagram-client",
      "instagram-downloader",
      "instagram-feed",
      "instagram-metadata",
      "instagram-photos",
      "instagram-scraper",
      "instagram-stories",
      "instagram-user-photos",
      "instaloader",
      "osint",
      "osint-python",
      "pictures",
      "videos"
    ]
  },
  {
    "name": "iOSInterviewQuestions",
    "full_name": "ChenYilong/iOSInterviewQuestions",
    "url": "https://github.com/ChenYilong/iOSInterviewQuestions",
    "description": "iOS interview questions;iOS\u9762\u8bd5\u9898\u96c6\u9526\uff08\u9644\u7b54\u6848\uff09 ",
    "stars": 9464,
    "language": "Swift",
    "updated": "2025-06-27",
    "topics": []
  },
  {
    "name": "OneForAll",
    "full_name": "shmilylty/OneForAll",
    "url": "https://github.com/shmilylty/OneForAll",
    "description": "OneForAll\u662f\u4e00\u6b3e\u529f\u80fd\u5f3a\u5927\u7684\u5b50\u57df\u6536\u96c6\u5de5\u5177",
    "stars": 9072,
    "language": "Python",
    "updated": "2025-06-30",
    "topics": [
      "altname",
      "bugbounty",
      "content-security-policy",
      "crossdomainxml",
      "information-gathering",
      "nsec",
      "oneforall",
      "osint",
      "pentest-tool",
      "python",
      "recon",
      "subdomain",
      "subdomain-bruteforcing",
      "subdomain-collection",
      "subdomain-crawler",
      "subdomain-enumeration",
      "subdomain-scanner",
      "subdomain-takeover",
      "subdomian-find",
      "zone-transfers"
    ]
  },
  {
    "name": "holehe",
    "full_name": "megadose/holehe",
    "url": "https://github.com/megadose/holehe",
    "description": "holehe allows you to check if the mail is used on different sites like twitter, instagram and will retrieve information on sites with the forgotten password function.",
    "stars": 8958,
    "language": "Python",
    "updated": "2025-06-30",
    "topics": [
      "ebay",
      "email",
      "emails",
      "information-gathering",
      "instagram",
      "open-source-intelligence",
      "osint",
      "osint-python",
      "osint-tools",
      "pypi",
      "python",
      "social-network",
      "tellonym",
      "trio",
      "twitter"
    ]
  },
  {
    "name": "OSINT-Framework",
    "full_name": "lockfale/OSINT-Framework",
    "url": "https://github.com/lockfale/OSINT-Framework",
    "description": "OSINT Framework",
    "stars": 8918,
    "language": "JavaScript",
    "updated": "2025-06-30",
    "topics": [
      "footprinting",
      "intelligence-gathering",
      "osint",
      "osint-framework",
      "osint-resources",
      "reconnaissance"
    ]
  },
  {
    "name": "rengine",
    "full_name": "yogeshojha/rengine",
    "url": "https://github.com/yogeshojha/rengine",
    "description": "reNgine is an automated reconnaissance framework for web applications with a focus on highly configurable streamlined recon process via Engines, recon data correlation and organization, continuous monitoring, backed by a database, and simple yet intuitive User Interface. reNgine makes it easy for penetration testers to gather reconnaissance with minimal configuration and with the help of reNgine's correlation, it just makes recon effortless.",
    "stars": 7993,
    "language": "HTML",
    "updated": "2025-06-30",
    "topics": [
      "bug-bounty",
      "bugbounty",
      "hacking",
      "information-gathering",
      "infosec",
      "osint",
      "penetration-testing",
      "pentesting",
      "recon",
      "recon-engine",
      "reconnaissance",
      "rengine",
      "scanner",
      "scanner-web",
      "scanning",
      "security-tools"
    ]
  },
  {
    "name": "awesome-ml-for-cybersecurity",
    "full_name": "jivoi/awesome-ml-for-cybersecurity",
    "url": "https://github.com/jivoi/awesome-ml-for-cybersecurity",
    "description": " :octocat: Machine Learning for Cyber Security",
    "stars": 7628,
    "language": null,
    "updated": "2025-06-30",
    "topics": [
      "awesome-list",
      "cyber-security",
      "data-mining",
      "machine-learning"
    ]
  },
  {
    "name": "awesome-youtubers",
    "full_name": "JoseDeFreitas/awesome-youtubers",
    "url": "https://github.com/JoseDeFreitas/awesome-youtubers",
    "description": "An awesome list of awesome YouTubers that teach about technology. Tutorials about web development, computer science, machine learning, game development, cybersecurity, and more.",
    "stars": 6666,
    "language": "Markdown",
    "updated": "2025-06-30",
    "topics": [
      "awesome",
      "awesome-list",
      "list",
      "youtube",
      "youtubers"
    ]
  },
  {
    "name": "reconftw",
    "full_name": "six2dez/reconftw",
    "url": "https://github.com/six2dez/reconftw",
    "description": "reconFTW is a tool designed to perform automated recon on a target domain by running the best set of tools to perform scanning and finding out vulnerabilities",
    "stars": 6409,
    "language": "Shell",
    "updated": "2025-06-30",
    "topics": [
      "bug-bounty",
      "bugbounty",
      "dns",
      "fuzzing",
      "hacking",
      "nuclei",
      "osint",
      "penetration-testing",
      "pentest",
      "pentest-tool",
      "pentesting",
      "recon",
      "reconnaissance",
      "scanner",
      "security",
      "security-tools",
      "subdomain",
      "vulnerabilities"
    ]
  },
  {
    "name": "AutoRecon",
    "full_name": "Tib3rius/AutoRecon",
    "url": "https://github.com/Tib3rius/AutoRecon",
    "description": "AutoRecon is a multi-threaded network reconnaissance tool which performs automated enumeration of services.",
    "stars": 5558,
    "language": "Python",
    "updated": "2025-06-30",
    "topics": []
  },
  {
    "name": "discover",
    "full_name": "leebaird/discover",
    "url": "https://github.com/leebaird/discover",
    "description": "Custom bash scripts used to automate various penetration testing tasks including recon, scanning,  enumeration, and malicious payload creation using Metasploit. For use with Kali Linux.",
    "stars": 3678,
    "language": "Shell",
    "updated": "2025-06-30",
    "topics": [
      "bash",
      "enumeration",
      "information-gathering",
      "kali-linux",
      "metasploit",
      "nmap",
      "osint",
      "payload-generator",
      "pentesting",
      "recon",
      "reconnaissance",
      "red-team",
      "scanning"
    ]
  },
  {
    "name": "reconspider",
    "full_name": "bhavsec/reconspider",
    "url": "https://github.com/bhavsec/reconspider",
    "description": "\ud83d\udd0e Most Advanced Open Source Intelligence (OSINT) Framework for scanning IP Address, Emails, Websites, Organizations.",
    "stars": 2315,
    "language": "Python",
    "updated": "2025-06-30",
    "topics": [
      "automated",
      "cybersecurity",
      "framework",
      "hacking",
      "information-gathering",
      "osint",
      "pentest",
      "pentesting",
      "python",
      "recon",
      "reconnaissance",
      "scanner",
      "security"
    ]
  },
  {
    "name": "Sudomy",
    "full_name": "screetsec/Sudomy",
    "url": "https://github.com/screetsec/Sudomy",
    "description": "Sudomy is a subdomain enumeration tool to collect subdomains and analyzing domains performing automated reconnaissance (recon) for bug hunting / pentesting",
    "stars": 2179,
    "language": "Shell",
    "updated": "2025-06-28",
    "topics": [
      "bash",
      "bugbounty",
      "bugcrowd",
      "collected-subdomains",
      "enumeration",
      "framework",
      "hackerone",
      "httprobe",
      "kali",
      "kali-linux",
      "pentesting",
      "recon-subdomain",
      "reconnaissance",
      "scanner",
      "subdomain-enumeration",
      "subdomain-finder",
      "subdomain-scanner",
      "subfinder",
      "sublist3r"
    ]
  },
  {
    "name": "burpgpt",
    "full_name": "aress31/burpgpt",
    "url": "https://github.com/aress31/burpgpt",
    "description": "A Burp Suite extension that integrates OpenAI's GPT to perform an additional passive scan for discovering highly bespoke vulnerabilities and enables running traffic-based analysis of any type.",
    "stars": 2152,
    "language": "Java",
    "updated": "2025-06-27",
    "topics": [
      "ai",
      "burp-extensions",
      "burp-plugin",
      "burpsuite",
      "burpsuite-extender",
      "cybersecurity",
      "gpt",
      "gpt-3",
      "openai",
      "openai-api",
      "pentesting",
      "security",
      "security-automation",
      "webapp"
    ]
  },
  {
    "name": "awesome-programming-books",
    "full_name": "zero-equals-false/awesome-programming-books",
    "url": "https://github.com/zero-equals-false/awesome-programming-books",
    "description": "\ud83d\udcda A curated list of awesome programming books (Algorithms and data structures, Artificial intelligence, Software Architecture, Human\u2013computer interaction, Operating Systems, Database Systems, IT Security, Concurrency, Interpreters and Compilers, High-Performance Computing, Distributed Systems, Game Development, Mathematical optimization)",
    "stars": 2012,
    "language": null,
    "updated": "2025-06-28",
    "topics": [
      "awesome",
      "awesome-list",
      "books",
      "learning-resources",
      "programming"
    ]
  },
  {
    "name": "lazyrecon",
    "full_name": "nahamsec/lazyrecon",
    "url": "https://github.com/nahamsec/lazyrecon",
    "description": "This script is intended to automate your reconnaissance process in an organized fashion",
    "stars": 1981,
    "language": "Shell",
    "updated": "2025-06-27",
    "topics": []
  },
  {
    "name": "GitGot",
    "full_name": "BishopFox/GitGot",
    "url": "https://github.com/BishopFox/GitGot",
    "description": "Semi-automated, feedback-driven tool to rapidly search through troves of public data on GitHub for sensitive secrets.",
    "stars": 1514,
    "language": "Python",
    "updated": "2025-06-25",
    "topics": [
      "fuzzy-matching",
      "gist-search",
      "gists",
      "github-api",
      "osint",
      "python",
      "recon",
      "reconnaissance",
      "security",
      "security-scanner",
      "security-tools",
      "sensitive-data-exposure"
    ]
  },
  {
    "name": "AI-Infra-Guard",
    "full_name": "Tencent/AI-Infra-Guard",
    "url": "https://github.com/Tencent/AI-Infra-Guard",
    "description": "A comprehensive, intelligent, easy-to-use, and lightweight AI Infrastructure Vulnerability Assessment and MCP Server Security Analysis Tool.",
    "stars": 1431,
    "language": "Go",
    "updated": "2025-06-30",
    "topics": []
  },
  {
    "name": "AttackSurfaceMapper",
    "full_name": "superhedgy/AttackSurfaceMapper",
    "url": "https://github.com/superhedgy/AttackSurfaceMapper",
    "description": "AttackSurfaceMapper is a tool that aims to automate the reconnaissance process.",
    "stars": 1366,
    "language": "Python",
    "updated": "2025-06-24",
    "topics": [
      "attack-surface",
      "attacksurfacemapper",
      "linkedin",
      "osint",
      "python",
      "reconnaissance",
      "subdomains"
    ]
  },
  {
    "name": "AIL-framework",
    "full_name": "CIRCL/AIL-framework",
    "url": "https://github.com/CIRCL/AIL-framework",
    "description": "AIL framework - Analysis Information Leak framework. Project moved to https://github.com/ail-project",
    "stars": 1332,
    "language": "Python",
    "updated": "2025-06-28",
    "topics": [
      "ail-framework",
      "analysis",
      "data-mining",
      "information-leak",
      "information-security",
      "leak",
      "privacy",
      "security",
      "security-incidents"
    ]
  },
  {
    "name": "legion",
    "full_name": "Abacus-Group-RTO/legion",
    "url": "https://github.com/Abacus-Group-RTO/legion",
    "description": "Legion is an open source, easy-to-use, super-extensible and semi-automated network penetration testing tool that aids in discovery, reconnaissance and exploitation of information systems.",
    "stars": 1045,
    "language": "Python",
    "updated": "2025-06-19",
    "topics": []
  },
  {
    "name": "mantis",
    "full_name": "PhonePe/mantis",
    "url": "https://github.com/PhonePe/mantis",
    "description": "Mantis is a security framework that automates the workflow of discovery, reconnaissance, and vulnerability scanning.",
    "stars": 941,
    "language": "Python",
    "updated": "2025-06-26",
    "topics": [
      "application-security",
      "attack-surface-management",
      "bugbounty",
      "caasm",
      "hacktoberfest",
      "osint",
      "pentesting",
      "product-security",
      "recon",
      "security-tools"
    ]
  },
  {
    "name": "karma_v2",
    "full_name": "Dheerajmadhukar/karma_v2",
    "url": "https://github.com/Dheerajmadhukar/karma_v2",
    "description": "\u2877\u2802\ud835\ude94\ud835\ude8a\ud835\ude9b\ud835\ude96\ud835\ude8a \ud835\ude9f\ud835\udff8\u2810\u28be is a Passive Open Source Intelligence (OSINT) Automated Reconnaissance (framework)",
    "stars": 860,
    "language": "Shell",
    "updated": "2025-06-19",
    "topics": [
      "automation",
      "bash-script",
      "bugbounty",
      "infrastructure",
      "intelligence",
      "osint",
      "reconnaissance",
      "shodan"
    ]
  },
  {
    "name": "ODIN",
    "full_name": "chrismaddalena/ODIN",
    "url": "https://github.com/chrismaddalena/ODIN",
    "description": "Automated network asset, email, and social media profile discovery and cataloguing.",
    "stars": 646,
    "language": "Python",
    "updated": "2025-06-16",
    "topics": [
      "asset-discovery",
      "neo4j",
      "osint",
      "recon",
      "reconnaissance"
    ]
  },
  {
    "name": "LazyRecon",
    "full_name": "capt-meelo/LazyRecon",
    "url": "https://github.com/capt-meelo/LazyRecon",
    "description": "An automated approach to performing recon for bug bounty hunting and penetration testing.",
    "stars": 444,
    "language": "Shell",
    "updated": "2025-06-22",
    "topics": [
      "bugbounty",
      "pentest",
      "recon",
      "reconnaissance"
    ]
  },
  {
    "name": "recon-pipeline",
    "full_name": "epi052/recon-pipeline",
    "url": "https://github.com/epi052/recon-pipeline",
    "description": "An automated target reconnaissance pipeline.",
    "stars": 435,
    "language": "Python",
    "updated": "2025-05-27",
    "topics": [
      "bugbounty",
      "python3",
      "recon",
      "recon-pipeline",
      "reconnaissance",
      "scanner",
      "security-tools"
    ]
  },
  {
    "name": "Machine-Learning-for-Cybersecurity-Cookbook",
    "full_name": "PacktPublishing/Machine-Learning-for-Cybersecurity-Cookbook",
    "url": "https://github.com/PacktPublishing/Machine-Learning-for-Cybersecurity-Cookbook",
    "description": "Machine Learning for Cybersecurity Cookbook, published by Packt",
    "stars": 340,
    "language": "Jupyter Notebook",
    "updated": "2025-06-26",
    "topics": []
  },
  {
    "name": "megplus",
    "full_name": "EdOverflow/megplus",
    "url": "https://github.com/EdOverflow/megplus",
    "description": "Automated reconnaissance wrapper \u2014 TomNomNom's meg on steroids. [DEPRECATED]",
    "stars": 306,
    "language": "Shell",
    "updated": "2025-06-02",
    "topics": [
      "bugbounty",
      "infosec",
      "recon",
      "reconnaissance",
      "security"
    ]
  },
  {
    "name": "AutoRecon",
    "full_name": "JoshuaMart/AutoRecon",
    "url": "https://github.com/JoshuaMart/AutoRecon",
    "description": "Simple shell script for automated domain recognition with some tools",
    "stars": 301,
    "language": "Shell",
    "updated": "2025-06-22",
    "topics": [
      "automated",
      "bugbounty",
      "domain-discovery",
      "recon",
      "reconnaissance"
    ]
  },
  {
    "name": "Subrake",
    "full_name": "hash3liZer/Subrake",
    "url": "https://github.com/hash3liZer/Subrake",
    "description": "\ud83d\ude80 A DNS automated scanner and tool \ud83d\uddb1\ufe0f (Zone Transfer, DNS Zone Takeover, Subdomain Takeover).",
    "stars": 297,
    "language": "CSS",
    "updated": "2025-06-27",
    "topics": [
      "bugbountytips",
      "dns-takeover",
      "reconnaissance",
      "subdomain-bruteforcing",
      "subdomain-enumeration",
      "subdomain-scanner",
      "subdomain-takeover",
      "zone-takeover",
      "zone-transfers"
    ]
  },
  {
    "name": "SubDomz",
    "full_name": "0xPugal/SubDomz",
    "url": "https://github.com/0xPugal/SubDomz",
    "description": "An Automated Subdomain Enumeration Tool",
    "stars": 264,
    "language": "Shell",
    "updated": "2025-06-12",
    "topics": [
      "bugbounty",
      "recon",
      "reconnaissance",
      "subdomain-enumeration",
      "subdomain-finder",
      "subdomains-discovery"
    ]
  },
  {
    "name": "intelspy",
    "full_name": "maldevel/intelspy",
    "url": "https://github.com/maldevel/intelspy",
    "description": "Perform automated network reconnaissance scans",
    "stars": 231,
    "language": "Python",
    "updated": "2025-06-17",
    "topics": [
      "enumeration",
      "gathering",
      "hacking",
      "information",
      "information-gathering",
      "intelligence",
      "intelligence-gathering",
      "port-scanning",
      "ports",
      "reconnaissance",
      "rightclickhack",
      "services"
    ]
  },
  {
    "name": "eulers-shield",
    "full_name": "KOSASIH/eulers-shield",
    "url": "https://github.com/KOSASIH/eulers-shield",
    "description": "A decentralized, AI-powered financial system for stabilizing the value of Pi Coin at $314159. Combining blockchain, machine learning, and cybersecurity, Euler's Shield ensures the security, scalability, and decentralization of the Pi Coin ecosystem.",
    "stars": 201,
    "language": "Python",
    "updated": "2025-06-28",
    "topics": [
      "cyber-security",
      "eulers-shield",
      "pi-coin",
      "pi-network",
      "pi-network-ecosystem",
      "stablecoin"
    ]
  },
  {
    "name": "Hands-on-Machine-Learning-for-Cyber-Security",
    "full_name": "PacktPublishing/Hands-on-Machine-Learning-for-Cyber-Security",
    "url": "https://github.com/PacktPublishing/Hands-on-Machine-Learning-for-Cyber-Security",
    "description": "Hands-On Machine Learning for Cybersecurity, published by Packt",
    "stars": 194,
    "language": "Jupyter Notebook",
    "updated": "2025-06-12",
    "topics": []
  },
  {
    "name": "IoT-Network-Intrusion-Detection-System-UNSW-NB15",
    "full_name": "abhinav-bhardwaj/IoT-Network-Intrusion-Detection-System-UNSW-NB15",
    "url": "https://github.com/abhinav-bhardwaj/IoT-Network-Intrusion-Detection-System-UNSW-NB15",
    "description": "Network Intrusion Detection based on various machine learning and deep learning algorithms using UNSW-NB15 Dataset",
    "stars": 173,
    "language": "Jupyter Notebook",
    "updated": "2025-05-27",
    "topics": [
      "classification",
      "cybersecurity",
      "decision-tree-classifier",
      "deep-learning",
      "iot",
      "iot-security",
      "keras",
      "knn",
      "linear-regression",
      "logistic-regression",
      "machine-learning",
      "mlp-classifier",
      "multilayer-perceptron",
      "network-intrusion-detection",
      "network-security",
      "random-forest",
      "supervised-learning",
      "svm-classifier",
      "tensorflow",
      "unsw-nb15"
    ]
  },
  {
    "name": "practical-ml-for-cybersecurity",
    "full_name": "shramos/practical-ml-for-cybersecurity",
    "url": "https://github.com/shramos/practical-ml-for-cybersecurity",
    "description": "More than twenty practical cases with real datasets of application of Machine Learning to the field of Cybersecurity",
    "stars": 159,
    "language": "Jupyter Notebook",
    "updated": "2025-06-25",
    "topics": [
      "aprendizaje-automatico",
      "artificial",
      "artificial-intelligence",
      "casos",
      "ciberseguridad",
      "curso",
      "cybersecurity",
      "datasets",
      "ejercicios",
      "ia",
      "inteligencia",
      "inteligencia-artificial",
      "learning",
      "machine",
      "machine-learning",
      "practicos",
      "real",
      "udemy",
      "udemy-cybersecurity",
      "udemy-machine-learning"
    ]
  },
  {
    "name": "Intrusion-and-anomaly-detection-with-machine-learning",
    "full_name": "slrbl/Intrusion-and-anomaly-detection-with-machine-learning",
    "url": "https://github.com/slrbl/Intrusion-and-anomaly-detection-with-machine-learning",
    "description": "Machine learning algorithms applied on log analysis to detect intrusions and suspicious activities.",
    "stars": 156,
    "language": "Python",
    "updated": "2025-06-29",
    "topics": [
      "cybersecurity",
      "detect-intrusions",
      "http-status-code",
      "infosec",
      "intrusion-detection",
      "log-analysis",
      "machine-learning"
    ]
  },
  {
    "name": "PyVerse",
    "full_name": "UTSAVS26/PyVerse",
    "url": "https://github.com/UTSAVS26/PyVerse",
    "description": "PyVerse is an open-source collection of diverse Python projects, tools, and scripts, ranging from beginner to advanced, across various domains like machine learning, web development, and automation.",
    "stars": 155,
    "language": "Jupyter Notebook",
    "updated": "2025-06-27",
    "topics": [
      "algorithms",
      "automation",
      "blockchain",
      "codepeak2024",
      "contributions-welcome",
      "cybersecurity",
      "data-science",
      "deep-learning",
      "game-development",
      "gssoc",
      "gssoc-extd",
      "gssoc24",
      "hacktoberfest",
      "machine-learning",
      "python",
      "swoc2025",
      "web-development",
      "wob-24"
    ]
  },
  {
    "name": "IntroductionToMachineLearningForSecurityPros",
    "full_name": "cylance/IntroductionToMachineLearningForSecurityPros",
    "url": "https://github.com/cylance/IntroductionToMachineLearningForSecurityPros",
    "description": "Example code for our book Introduction to Artificial Intelligence for Security Professionals",
    "stars": 153,
    "language": "Python",
    "updated": "2025-05-17",
    "topics": []
  },
  {
    "name": "prokzee",
    "full_name": "al-sultani/prokzee",
    "url": "https://github.com/al-sultani/prokzee",
    "description": "A cross-platform desktop application for HTTP/HTTPS traffic interception and analysis, built with Go. Features modern UI, traffic manipulation tools, request resending, fuzzing capabilities, and AI-powered analysis.",
    "stars": 152,
    "language": "Go",
    "updated": "2025-06-29",
    "topics": [
      "bug-bounty",
      "bugbounty",
      "go",
      "hacking",
      "network-analysis",
      "open-source",
      "security",
      "security-audit",
      "wails"
    ]
  },
  {
    "name": "vulnerability-analysis",
    "full_name": "NVIDIA-AI-Blueprints/vulnerability-analysis",
    "url": "https://github.com/NVIDIA-AI-Blueprints/vulnerability-analysis",
    "description": "Rapidly identify and mitigate container security vulnerabilities with generative AI.",
    "stars": 138,
    "language": "Jupyter Notebook",
    "updated": "2025-06-30",
    "topics": []
  },
  {
    "name": "Network-Intrusion-Detection-Using-Machine-Learning",
    "full_name": "abhinav-bhardwaj/Network-Intrusion-Detection-Using-Machine-Learning",
    "url": "https://github.com/abhinav-bhardwaj/Network-Intrusion-Detection-Using-Machine-Learning",
    "description": "A Novel Statistical Analysis and Autoencoder Driven Intelligent Intrusion Detection Approach",
    "stars": 134,
    "language": "Jupyter Notebook",
    "updated": "2025-05-25",
    "topics": [
      "autoencoder",
      "classification",
      "cnn-keras",
      "cybersecurity",
      "data-science",
      "deep-learning",
      "intrusion-detection-system",
      "keras",
      "lstm-model",
      "machine-learning",
      "mlp-classifier",
      "network",
      "network-security",
      "nsl-kdd",
      "pandas",
      "statistical-analysis",
      "supervised-learning",
      "svm-classifier"
    ]
  },
  {
    "name": "MALWARE-DETECTION-FINAL-YEAR-PROJECT",
    "full_name": "Vatshayan/MALWARE-DETECTION-FINAL-YEAR-PROJECT",
    "url": "https://github.com/Vatshayan/MALWARE-DETECTION-FINAL-YEAR-PROJECT",
    "description": "Final Year Malware Detection Project with PPT, Research Paper, code and Synopsis. Malware detection project by Machine Learning ALgorithms.",
    "stars": 133,
    "language": "Jupyter Notebook",
    "updated": "2025-06-25",
    "topics": [
      "btech",
      "btechfinalyear",
      "cryptographyproject",
      "cybersecurity",
      "datasets",
      "final-project",
      "final-year-project",
      "machine",
      "machine-learning",
      "machinelearningprojects",
      "malware",
      "malware-analysis",
      "malware-detection",
      "malware-project",
      "malware-research",
      "malwaredetection",
      "malwareproject",
      "projects",
      "sem8",
      "semproject"
    ]
  },
  {
    "name": "SEMA",
    "full_name": "csvl/SEMA",
    "url": "https://github.com/csvl/SEMA",
    "description": " SEMA is based on angr, a symbolic execution engine  used to extract API calls. Especially, we extend ANGR with strategies to create representative signatures based on System Call Dependency graph (SCDG). Those SCDGs can be exploited in machine learning modules to do classification/detection.",
    "stars": 115,
    "language": "Python",
    "updated": "2025-06-29",
    "topics": [
      "angr",
      "binary-analysis",
      "classification",
      "concolic-execution",
      "ctf",
      "cybersecurity",
      "detection",
      "linux",
      "malware",
      "malware-analysis",
      "malware-detection",
      "malware-research",
      "python",
      "reverse",
      "reverse-engineering",
      "sema",
      "static-analysis",
      "symbolic",
      "symbolic-execution",
      "windows"
    ]
  },
  {
    "name": "Cyberattack-Detection",
    "full_name": "antoinedelplace/Cyberattack-Detection",
    "url": "https://github.com/antoinedelplace/Cyberattack-Detection",
    "description": "Cyber Attack Detection thanks to Machine Learning Algorithms",
    "stars": 104,
    "language": "Python",
    "updated": "2025-04-06",
    "topics": [
      "cyberattack",
      "cybersecurity",
      "detection",
      "machine-learning",
      "netflow",
      "network",
      "network-security"
    ]
  },
  {
    "name": "HackThisAI",
    "full_name": "JosephTLucas/HackThisAI",
    "url": "https://github.com/JosephTLucas/HackThisAI",
    "description": "Adversarial Machine Learning (AML) Capture the Flag (CTF)",
    "stars": 102,
    "language": "Jupyter Notebook",
    "updated": "2025-05-04",
    "topics": [
      "adversarial-machine-learning",
      "artificial-intelligence",
      "ctf",
      "cybersecurity",
      "data-science",
      "infosec",
      "machine-learning",
      "machine-learning-security"
    ]
  },
  {
    "name": "TI-Mindmap-GPT",
    "full_name": "format81/TI-Mindmap-GPT",
    "url": "https://github.com/format81/TI-Mindmap-GPT",
    "description": " AI-powered tool designed to help producing Threat Intelligence Mindmap.",
    "stars": 97,
    "language": "Python",
    "updated": "2025-06-17",
    "topics": [
      "cybersecurity",
      "generative-ai",
      "llm",
      "openai",
      "openai-api",
      "threat-intelligence"
    ]
  },
  {
    "name": "WhiteHat",
    "full_name": "urcuqui/WhiteHat",
    "url": "https://github.com/urcuqui/WhiteHat",
    "description": "A collection of AI-powered tools for phishing detection, adversarial machine learning, and cybersecurity research. Includes Streamlit/Flask apps, attack simulations, LoRA fine-tuning, and secure model evaluation for red teaming and defense.",
    "stars": 94,
    "language": "Jupyter Notebook",
    "updated": "2025-06-26",
    "topics": [
      "cybersecurity",
      "hacker",
      "hacking",
      "machine-learning-algorithms",
      "penetration-testing",
      "pentesting",
      "r",
      "research",
      "researcher",
      "threat-intelligence",
      "whitehat"
    ]
  },
  {
    "name": "-L-",
    "full_name": "jettbrains/-L-",
    "url": "https://github.com/jettbrains/-L-",
    "description": "W3C Strategic Highlights  September 2019  This report was prepared for the September 2019 W3C Advisory Committee Meeting (W3C Member link). See the accompanying W3C Fact Sheet \u2014 September 2019. For the previous edition, see the April 2019 W3C Strategic Highlights. For future editions of this report, please consult the latest version.  A Chinese translation is available.  \u2630 Contents  Introduction Future Web Standards Meeting Industry Needs Web Payments Digital Publishing Media and Entertainment Web & Telecommunications Real-Time Communications (WebRTC) Web & Networks Automotive Web of Things Strengthening the Core of the Web HTML CSS Fonts SVG Audio Performance Web Performance WebAssembly Testing Browser Testing and Tools WebPlatform Tests Web of Data Web for All Security, Privacy, Identity Internationalization (i18n) Web Accessibility Outreach to the world W3C Developer Relations W3C Training Translations W3C Liaisons Introduction  This report highlights recent work of enhancement of the existing landscape of the Web platform and innovation for the growth and strength of the Web.  33 working groups and a dozen interest groups enable W3C to pursue its mission through the creation of Web standards, guidelines, and supporting materials. We track the tremendous work done across the Consortium through homogeneous work-spaces in Github which enables better monitoring and management.  We are in the middle of a period where we are chartering numerous working groups which demonstrate the rapid degree of change for the Web platform:  After 4 years, we are nearly ready to publish a Payment Request API Proposed Recommendation and we need to soon charter follow-on work. In the last year we chartered the Web Payment Security Interest Group. In the last year we chartered the Web Media Working Group with 7 specifications for next generation Media support on the Web. We have Accessibility Guidelines under W3C Member review which includes Silver, a new approach. We have just launched the Decentralized Identifier Working Group which has tremendous potential because Decentralized Identifier (DID) is an identifier that is globally unique, resolveable with high availability, and cryptographically verifiable. We have Privacy IG (PING) under W3C Member review which strengthens our focus on the tradeoff between privacy and function. We have a new CSS charter under W3C Member review which maps the group's work for the next three years. In this period, W3C and the WHATWG have succesfully completed the negotiation of a Memorandum of Understanding rooted in the mutual belief that that having two distinct specifications claiming to be normative is generally harmful for the Web community. The MOU, signed last May, describes how the two organizations are to collaborate on the development of a single authoritative version of the HTML and DOM specifications. W3C subsequently rechartered the HTML Working Group to assist the W3C community in raising issues and proposing solutions for the HTML and DOM specifications, and for the production of W3C Recommendations from WHATWG Review Drafts.  As the Web evolves continuously, some groups are looking for ways for specifications to do so as well. So-called \"evergreen recommendations\" or \"living standards\" aim to track continuous development (and maintenance) of features, on a feature-by-feature basis, while getting review and patent commitments.  We see the maturation and further development of an incredible number of new technologies coming to the Web. Continued progress in many areas demonstrates the vitality of the W3C and the Web community, as the rest of the report illustrates.  Future Web Standards W3C has a variety of mechanisms for listening to what the community thinks could become good future Web standards. These include discussions with the Membership, discussions with other standards bodies, the activities of thousands of participants in over 300 community groups, and W3C Workshops. There are lots of good ideas. The W3C strategy team has been identifying promising topics and invites public participation.   Future, recent and under consideration Workshops include:  Inclusive XR (5-6 November 2019, Seattle, WA, USA) to explore existing and future approaches on making Virtual and Augmented Reality experiences more inclusive, including to people with disabilities; W3C Workshop on Data Models for Transportation (12-13 September 2019, Palo Alto, CA, USA) W3C Workshop on Web Games (27-28 June 2019, Redmond, WA, USA), view report Second W3C Workshop on the Web of Things (3-5 June 2019, Munich, Germany) W3C Workshop on Web Standardization for Graph Data; Creating Bridges: RDF, Property Graph and SQL (4-6 March 2019, Berlin, Germany), view report Web & Machine Learning. The Strategy Funnel documents the staff's exploration of potential new work at various phases: Exploration and Investigation, Incubation and Evaluation, and eventually to the chartering of a new standards group. The Funnel view is a GitHub Project where new area are issues represented by \u201ccards\u201d which move through the columns, usually from left to right. Most cards start in Exploration and move towards Chartering, or move out of the funnel.  Public input is welcome at any stage but particularly once Incubation has begun. This helps W3C identify work that is sufficiently incubated to warrant standardization, to review the ecosystem around the work and indicate interest in participating in its standardization, and then to draft a charter that reflects an appropriate scope. Ongoing feedback can speed up the overall standardization process.  Since the previous highlights document, W3C has chartered a number of groups, and started discussion on many more:  Newly Chartered or Rechartered  Web Application Security WG (03-Apr) Web Payment Security IG (17-Apr) Patent and Standards IG (24-Apr) Web Applications WG (14-May) Web & Networks IG (16-May) Media WG (23-May) Media and Entertainment IG (06-Jun) HTML WG (06-Jun) Decentralized Identifier WG (05-Sep) Extended  Privacy IG (PING) (30-Sep) Verifiable Claims WG (30-Sep) Service Workers WG (31-Dec) Dataset Exchange WG (31-Dec) Web of Things Working Group (31-Dec) Web Audio Working Group (31-Dec) Proposed charters / Advance Notice  Accessibility Guidelines WG Privacy IG (PING) RDF Literal Direction WG Timed Text WG CSS WG Web Authentication WG Closed  Internationalization Tag Set IG Meeting Industry Needs Web Payments   All Web Payments specifications  W3C's payments standards enable a streamlined checkout experience, enabling a consistent user experience across the Web with lower front end development costs for merchants. Users can store and reuse information and more quickly and accurately complete online transactions.  The Web Payments Working Group has republished Payment Request API as a Candidate Recommendation, aiming to publish a Proposed Recommendation in the Fall 2019, and is discussing use cases and features for Payment Request after publication of the 1.0 Recommendation. Browser vendors have been finalizing implementation of features added in the past year (view the implementation report).  As work continues on the Payment Handler API and its implementation (currently in Chrome and Edge Canary), one focus in 2019 is to increase adoption in other browsers. Recently, Mastercard demonstrated the use of Payment Request API to carry out EMVCo's Secure Remote Commerce (SRC) protocol whose payment method definition is being developed with active participation by Visa, Mastercard, American Express, and Discover. Payment method availability is a key factor in merchant considerations about adopting Payment Request API. The ability to get uniform adoption of a new payment method such as Secure Remote Commerce (SRC) also depends on the availability of the Payment Handler API in browsers, or of proprietary alternatives.  Web Monetization, which the Web Payments Working Group will discuss again at its face-to-face meeting in September, can be used to enable micropayments as an alternative revenue stream to advertising.  Since the beginning of 2019, Amazon, Brave Software, JCB, Certus Cybersecurity Solutions and Netflix have joined the Web Payments Working Group.  In April, W3C launched the Web Payment Security Group to enable W3C, EMVCo, and the FIDO Alliance to collaborate on a vision for Web payment security and interoperability. Participants will define areas of collaboration and identify gaps between existing technical specifications in order to increase compatibility among different technologies, such as:  How do SRC, FIDO, and Payment Request relate? The Payment Services Directive 2 (PSD2) regulations in Europe are scheduled to take effect in September 2019. What is the role of EMVCo, W3C, and FIDO technologies, and what is the current state of readiness for the deadline? How can we improve privacy on the Web at the same time as we meet industry requirements regarding user identity? Digital Publishing   All Digital Publishing specifications, Publication milestones  The Web is the universal publishing platform. Publishing is increasingly impacted by the Web, and the Web increasingly impacts Publishing.  Topic of particular interest to Publishing@W3C include typography and layout, accessibility, usability, portability, distribution, archiving, offline access, print on demand, and reliable cross referencing. And the diverse publishing community represented in the groups consist of the traditional \"trade\" publishers, ebook reading system manufacturers, but also publishers of audio book, scholarly journals or educational materials, library scientists or browser developers.  The Publishing Working Group currently concentrates on Audiobooks which lack a comprehensive standard, thus incurring extra costs and time to publish in this booming market. Active development is ongoing on the future standard:  Publication Manifest Audiobook profile for Web Publications Lightweight Packaging Format The BD Comics Manga Community Group, the Synchronized Multimedia for Publications Community Group, the Publishing Community Group and a future group on archival, are companions to the working group where specific work is developed and incubated.  The Publishing Community Group is a recently launched incubation channel for Publishing@W3C. The goal of the group is to propose, document, and prototype features broadly related to:  publications on the Web reading modes and systems and the user experience of publications The EPUB 3 Community Group has successfully completed the revision of EPUB 3.2.  The Publishing Business Group fosters ongoing participation by members of the publishing industry and the overall ecosystem in the development of Web infrastructure to better support the needs of the industry. The Business Group serves as an additional conduit to the Publishing Working Group and several Community Groups for feedback between the publishing ecosystem and W3C. The Publishing BG has played a vital role in fostering and advancing the adoption and continued development of EPUB 3. In particular the BG provided critical support to the update of EPUBCheck to validate EPUB content to the new EPUB 3.2 specification. This resulted in the development, in conjunction with the EPUB3 Community Group, of a new generation of EPUBCheck, i.e., EPUBCheck 4.2 production-ready release.  Media and Entertainment   All Media specifications  The Media and Entertainment vertical tracks media-related topics and features that create immersive experiences for end users. HTML5 brought standard audio and video elements to the Web. Standardization activities since then have aimed at turning the Web into a professional platform fully suitable for the delivery of media content and associated materials, enabling missing features to stream video content on the Web such as adaptive streaming and content protection. Together with Microsoft, Comcast, Netflix and Google, W3C received an Technology & Engineering Emmy Award in April 2019 for standardization of a full TV experience on the Web. Current goals are to:  Reinforce core media technologies: Creation of the Media Working Group, to develop media-related specifications incubated in the WICG (e.g. Media Capabilities, Picture-in-picture, Media Session) and maintain maintain/evolve Media Source Extensions (MSE) and Encrypted Media Extensions (EME). Improve support for Media Timed Events: data cues incubation. Enhance color support (HDR, wide gamut), in scope of the CSS WG and in the Color on the Web CG. Reduce fragmentation: Continue annual releases of a common and testable baseline media devices, in scope of the Web Media APIs CG and in collaboration with the CTA WAVE Project. Maintain the Road-map of Media Technologies for the Web which highlights Web technologies that can be used to build media applications and services, as well as known gaps to enable additional use cases. Create the future: Discuss perspectives for Media and Entertainment for the Web. Bring the power of GPUs to the Web (graphics, machine learning, heavy processing), under incubation in the GPU for the Web CG. Transition to a Working Group is under discussion. Determine next steps after the successful W3C Workshop on Web Games of June 2019. View the report. Timed Text  The Timed Text Working Group develops and maintains formats used for the representation of text synchronized with other timed media, like audio and video, and notably works on TTML, profiles of TTML, and WebVTT. Recent progress includes:  A robust WebVTT implementation report poises the specification for publication as a proposed recommendation. Discussions around re-chartering, notably to add a TTML Profile for Audio Description deliverable to the scope of the group, and clarify that rendering of captions within XR content is also in scope. Immersive Web  Hardware that enables Virtual Reality (VR) and Augmented Reality (AR) applications are now broadly available to consumers, offering an immersive computing platform with both new opportunities and challenges. The ability to interact directly with immersive hardware is critical to ensuring that the web is well equipped to operate as a first-class citizen in this environment.  The Immersive Web Working Group has been stabilizing the WebXR Device API while the companion Immersive Web Community Group incubates the next series of features identified as key for the future of the Immersive Web.  W3C plans a workshop focused on the needs and benefits at the intersection of VR & Accessibility (Inclusive XR), on 5-6 November 2019 in Seattle, WA, USA, to explore existing and future approaches on making Virtual and Augmented Reality experiences more inclusive.  Web & Telecommunications  The Web is the Open Platform for Mobile. Telecommunication service providers and network equipment providers have long been critical actors in the deployment of Web technologies. As the Web platform matures, it brings richer and richer capabilities to extend existing services to new users and devices, and propose new and innovative services.  Real-Time Communications (WebRTC)   All Real-Time Communications specifications  WebRTC has reshaped the whole communication landscape by making any connected device a potential communication end-point, bringing audio and video communications anywhere, on any network, vastly expanding the ability of operators to reach their customers. WebRTC serves as the corner-stone of many online communication and collaboration services.  The WebRTC Working Group aims to bringing WebRTC 1.0 (and companion specification Media Capture and Streams) to Recommendation by the end of 2019. Intense efforts are focused on testing (supported by a dedicated hackathon at IETF 104) and interoperability. The group is considering pushing features that have not gotten enough traction to separate modules or to a later minor revision of the spec.  Beyond WebRTC 1.0, the WebRTC Working Group will focus its efforts on WebRTC NV which the group has started documenting by identifying use cases.  Web & Networks  Recently launched, in the wake of the May 2018 Web5G workshop, the Web & Networks Interest Group is chaired by representatives from AT&T, China Mobile and Intel, with a goal to explore solutions for web applications to achieve better performance and resource allocation, both on the device and network. The group's first efforts are around use cases, privacy & security requirements and liaisons.  Automotive   All Automotive specifications  To create a rich application ecosystem for vehicles and other devices allowed to connect to the vehicle, the W3C Automotive Working Group is delivering a service specification to expose all common vehicle signals (engine temperature, fuel/charge level, range, tire pressure, speed, etc.)  The Vehicle Information Service Specification (VISS), which is a Candidate Recommendation, is seeing more implementations across the industry. It provides the access method to a common data model for all the vehicle signals \u2013presently encapsulating a thousand or so different data elements\u2013 and will be growing to accommodate the advances in automotive such as autonomous and driver assist technologies and electrification.  The group is already working on a successor to VISS, leveraging the underlying data model and the VIWI submission from Volkswagen, for a more robust means of accessing vehicle signals information and the same paradigm for other automotive needs including location-based services, media, notifications and caching content.  The Automotive and Web Platform Business Group acts as an incubator for prospective standards work. One of its task forces is using W3C VISS in performing data sampling and off-boarding the information to the cloud. Access to the wealth of information that W3C's auto signals standard exposes is of interest to regulators, urban planners, insurance companies, auto manufacturers, fleet managers and owners, service providers and others. In addition to components needed for data sampling and edge computing, capturing user and owner consent, information collection methods and handling of data are in scope.  The upcoming W3C Workshop on Data Models for Transportation (September 2019) is expected to focus on the need of additional ontologies around transportation space.  Web of Things   All Web of Things specifications  W3C's Web of Things work is designed to bridge disparate technology stacks to allow devices to work together and achieve scale, thus enabling the potential of the Internet of Things by eliminating fragmentation and fostering interoperability.  Thing descriptions expressed in JSON-LD cover the behavior, interaction affordances, data schema, security configuration, and protocol bindings. The Web of Things complements existing IoT ecosystems to reduce the cost and risk for suppliers and consumers of applications that create value by combining multiple devices and information services. There are many sectors that will benefit, e.g. smart homes, smart cities, smart industry, smart agriculture, smart healthcare and many more.  The Web of Things Working Group is finishing the initial Web of Things standards, with support from the Web of Things Interest Group:  Web of Things Architecture Thing Descriptions Strengthening the Core of the Web HTML   The HTML Working Group was chartered early June to assist the W3C community in raising issues and proposing solutions for the HTML and DOM specifications, and to produce W3C Recommendations from WHATWG Review Drafts.  A few days before, W3C and the WHATWG signed a Memorandum of Understanding outlining the agreement to collaborate on the development of a single version of the HTML and DOM specifications.  Issues and proposed solutions for HTML and DOM done via the newly rechartered HTML Working Group in the WHATWG repositories  The HTML Working Group is targetting November 2019 to bring HTML and DOM to Candidate Recommendations.  CSS  All CSS specifications  CSS is a critical part of the Open Web Platform. The CSS Working Group gathers requirements from two large groups of CSS users: the publishing industry and application developers. Within W3C, those groups are exemplified by the Publishing groups and the Web Platform Working Group. The former requires things like better pagination support and advanced font handling, the latter needs intelligent (and fast!) scrolling and animations.  What we know as CSS is actually a collection of almost a hundred specifications, referred to as \u2018modules\u2019. The current state of CSS is defined by a snapshot, updated once a year. The group also publishes an index defining every term defined by CSS specifications.  Fonts   All Fonts specifications  The Web Fonts Working Group develops specifications that allow the interoperable deployment of downloadable fonts on the Web, with a focus on Progressive Font Enrichment as well as maintenance of WOFF Recommendations.  Recent and ongoing work includes:  Early API experiments by Adobe and Monotype have demonstrated the feasibility of a font enrichment API, where a server delivers a font with minimal glyph repertoire and the client can query the full repertoire and request additional subsets on-the-fly. In other experiments, the Brotli compression used in WOFF 2 was extended to support shared dictionaries and patch update. Metrics to quantify improvement are a current hot discussion topic. The group will meet at ATypi 2019 in Japan, to gather requirements from the international typography community. The group will first produce a report summarizing the strengths and weaknesses of each prototype solution by Q2 2020. SVG   All SVG specifications  SVG is an important and widely-used part of the Open Web Platform. The SVG Working Group focuses on aligning the SVG 2.0 specification with browser implementations, having split the specification into a currently-implemented 2.0 and a forward-looking 2.1. Current activity is on stabilization, increased integration with the Open Web Platform, and test coverage analysis.  The Working Group was rechartered in March 2019. A new work item concerns native (non-Web-browser) uses of SVG as a non-interactive, vector graphics format.  Audio  The Web Audio Working Group was extended to finish its work on the Web Audio API, expecting to publish it as a Recommendation by year end. The specification enables synthesizing audio in the browser. Audio operations are performed with audio nodes, which are linked together to form a modular audio routing graph. Multiple sources \u2014 with different types of channel layout \u2014 are supported. This modular design provides the flexibility to create complex audio functions with dynamic effects.  The first version of Web Audio API is now feature complete and is implemented in all modern browsers. Work has started on the next version, and new features are being incubated in the Audio Community Group.  Performance   Web Performance  All Web Performance specifications  There are currently 18 specifications in development in the Web Performance Working Group aiming to provide methods to observe and improve aspects of application performance of user agent features and APIs. The W3C team is looking at related work incubated in the W3C GPU for the Web (WebGPU) Community Group which is poised to transition to a W3C Working Group. A preliminary draft charter is available.  WebAssembly  All WebAssembly specifications  WebAssembly improves Web performance and power by being a virtual machine and execution environment enabling loaded pages to run native (compiled) code. It is deployed in Firefox, Edge, Safari and Chrome. The specification will soon reach Candidate Recommendation.  WebAssembly enables near-native performance, optimized load time, and perhaps most importantly, a compilation target for existing code bases. While it has a small number of native types, much of the performance increase relative to Javascript derives from its use of consistent typing. WebAssembly leverages decades of optimization for compiled languages and the byte code is optimized for compactness and streaming (the web page starts executing while the rest of the code downloads). Network and API access all occurs through accompanying Javascript libraries -- the security model is identical to that of Javascript.  Requirements gathering and language development occur in the Community Group while the Working Group manages test development, community review and progression of specifications on the Recommendation Track.  Testing  Browser testing plays a critical role in the growth of the Web by:  Improving the reliability of Web technology definitions; Improving the quality of implementations of these technologies by helping vendors to detect bugs in their products; Improving the data available to Web developers on known bugs and deficiencies of Web technologies by publishing results of these tests. Browser Testing and Tools  The Browser Testing and Tools Working Group is developing WebDriver version 2, having published last year the W3C Recommendation of WebDriver. WebDriver acts as a remote control interface that enables introspection and control of user agents, provides a platform- and language-neutral wire protocol as a way for out-of-process programs to remotely instruct the behavior of Web, and emulates the actions of a real person using the browser.  WebPlatform Tests   The WebPlatform Tests project now provides a mechanism which allows to fully automate tests that previously needed to be run manually: TestDriver.  TestDriver enables sending trusted key and mouse events, sending complex series of trusted pointer and key interactions for things like in-content drag-and-drop or pinch zoom, and even file upload.  Since 2014 W3C began work on this coordinated open-source effort to build a cross-browser test suite for the Web Platform, which WHATWG, and all major browsers adopted.  Web of Data   All Data specifications  There have been several great success stories around the standardization of data on the web over the past year.  Verifiable Claims seems to have significant uptake. It is also significant that the Distributed Identifier WG charter has received numerous favorable reviews, and was just recently launched. JSON-LD has been a major success with the large deployment on Web sites via schema.org.  JSON-LD 1.1 completed technical work, about to transition to CR More than 25% of websites today include schema.org data in JSON-LD The Web of Things description is in CR since May, making use of JSON-LD Verifiable Credentials data model is in CR since July, also making use of JSON-LD Continued strong interest in decentralized identifiers Engagement from the TAG with reframing core documents, such as Ethical Web Principles, to include data on the web within their scope Data is increasingly important for all organizations, especially with the rise of IoT and Big Data. W3C has a mature and extensive suite of standards relating to data that were developed over two decades of experience, with plans for further work on making it easier for developers to work with graph data and knowledge graphs.  Linked Data is about the use of URIs as names for things, the ability to dereference these URIs to get further information and to include links to other data. There are ever-increasing sources of open Linked Data on the Web, as well as data services that are restricted to the suppliers and consumers of those services.  The digital transformation of industry is seeking to exploit advanced digital technologies. This will facilitate businesses to integrate horizontally along the supply and value chains, and vertically from the factory floor to the office floor. W3C is seeking to make it easier to support enterprise-wide data management and governance, reflecting the strategic importance of data to modern businesses.  Traditional approaches to data have focused on tabular databases (SQL/RDBMS), Comma Separated Value (CSV) files, and data embedded in PDF documents and spreadsheets. We're now in midst of a major shift to graph data with nodes and labeled directed links between them. Graph data is:  Faster than using SQL and associated JOIN operations More favorable to integrating data from heterogeneous sources Better suited to situations where the data model is evolving In the wake of the recent W3C Workshop on Graph Data we are in the process of launching a Graph Standardization Business Group to provide a business perspective with use cases and requirements, to coordinate technical standards work and liaisons with external organizations.  Web for All Security, Privacy, Identity  All Security specifications, all Privacy specifications  Authentication on the Web   As the WebAuthn Level 1 W3C Recommendation published last March is seeing wide implementation and adoption of strong cryptographic authentication, work is proceeding on Level 2.  The open standard Web API gives native authentication technology built into native platforms, browsers, operating systems (including mobile) and hardware, offering protection against hacking, credential theft, phishing attacks, thus aiming to end the era of passwords as a security construct. You may read more in our March press release.  Privacy  An increasing number of W3C specifications are benefitting from Privacy and Security review; there are security and privacy aspects to every specification. Early review is essential. Working with the TAG, the Privacy Interest Group has updated the Self-Review Questionnaire: Security and Privacy.  Other recent work of the group includes public blogging further to the exploration of anti-patterns in standards and permission prompts.  Security  The Web Application Security Working Group adopted Feature Policy, aiming to allow developers to selectively enable, disable, or modify the behavior of some of these browser features and APIs within their application; and Fetch Metadata, aiming to provide servers with enough information to make a priori decisions about whether or not to service a request based on the way it was made, and the context in which it will be used.  The Web Payment Security Interest Group, launched last April, convenes members from W3C, EMVCo, and the FIDO Alliance to discuss cooperative work to enhance the security and interoperability of Web payments (read more about payments).  Internationalization (i18n)   All Internationalization specifications, educational articles related to Internationalization, spec developers checklist  Only a quarter or so current Web users use English online and that proportion will continue to decrease as the Web reaches more and more communities of limited English proficiency. If the Web is to live up to the \"World Wide\" portion of its name, and for the Web to truly work for stakeholders all around the world engaging with content in various languages, it must support the needs of worldwide users as they engage with content in the various languages. The growth of epublishing also brings requirements for new features and improved typography on the Web. It is important to ensure the needs of local communities are captured.  The W3C Internationalization Initiative was set up to increase in-house resources dedicated to accelerating progress in making the World Wide Web \"worldwide\" by gathering user requirements, supporting developers, and education & outreach.  For an overview of current projects see the i18n radar. W3C's Internationalization efforts progressed on a number of fronts recently:  Requirements: New African and European language groups will work on the gap analysis, errata and layout requirements. Gap analysis: Japanese, Devanagari, Bengali, Tamil, Lao, Khmer, Javanese, and Ethiopic updated in the gap-analysis documents. Layout requirements document: notable progress tracked in the Southeast Asian Task Force while work continues on Chinese layout requirements. Developer support: Spec reviews: the i18n WG continues active review of specifications of the WHATWG and other W3C Working Groups. Short review checklist: easy way to begin a self-review to help spec developers understand what aspects of their spec are likely to need attention for internationalization, and points them to more detailed checklists for the relevant topics. It also helps those reviewing specs for i18n issues. Strings on the Web: Language and Direction Metadata lays out issues and discusses potential solutions for passing information about language and direction with strings in JSON or other data formats. The document was rewritten for clarity, and expanded. The group is collaborating with the JSON-LD and Web Publishing groups to develop a plan for updating RDF, JSON-LD and related specifications to handle metadata for base direction of text (bidi). User-friendly test format: a new format was developed for Internationalization Test Suite tests, which displays helpful information about how the test works. This particularly useful because those tests are pointed to by educational materials and gap-analysis documents. Web Platform Tests: a large number of tests in the i18n test suite have been ported to the WPT repository, including: css-counter-styles, css-ruby, css-syntax, css-test, css-text-decor, css-writing-modes, and css-pseudo. Education & outreach: (for all educational materials, see the HTML & CSS Authoring Techniques) Web Accessibility   All Accessibility specifications, WAI resources  The Web Accessibility Initiative supports W3C's Web for All mission. Recent achievements include:  Education and training: Inaccessibility of CAPTCHA updated to bring our analysis and recommendations up to date with CAPTCHA practice today, concluding two years of extensive work and invaluable input from the public (read more on the W3C Blog Learn why your web content and applications should be accessible. The Education and Outreach Working Group has completed revision and updating of the Business Case for Digital Accessibility. Accessibility guidelines: The Accessibility Guidelines Working Group has continued to update WCAG Techniques and Understanding WCAG 2.1; and published a Candidate Recommendation of Accessibility Conformance Testing Rules Format 1.0 to improve inter-rater reliability when evaluating conformance of web content to WCAG An updated charter is being developed to host work on \"Silver\", the next generation accessibility guidelines (WCAG 2.2) There are accessibility aspects to most specifications. Check your work with the FAST checklist.  Outreach to the world W3C Developer Relations   To foster the excellent feedback loop between Web Standards development and Web developers, and to grow participation from that diverse community, recent W3C Developer Relations activities include:  @w3cdevs tracks the enormous amount of work happening across W3C W3C Track during the Web Conference 2019 in San Francisco Tech videos: W3C published the 2019 Web Games Workshop videos The 16 September 2019 Developer Meetup in Fukuoka, Japan, is open to all and will combine a set of technical demos prepared by W3C groups, and a series of talks on a selected set of W3C technologies and projects W3C is involved with Mozilla, Google, Samsung, Microsoft and Bocoup in the organization of ViewSource 2019 in Amsterdam (read more on the W3C Blog) W3C Training   In partnership with EdX, W3C's MOOC training program, W3Cx offers a complete \"Front-End Web Developer\" (FEWD) professional certificate program that consists of a suite of five courses on the foundational languages that power the Web: HTML5, CSS and JavaScript. We count nearly 900K students from all over the world.  Translations  Many Web users rely on translations of documents developed at W3C whose official language is English. W3C is extremely grateful to the continuous efforts of its community in ensuring our various deliverables in general, and in our specifications in particular, are made available in other languages, for free, ensuring their exposure to a much more diverse set of readers.  Last Spring we developed a more robust system, a new listing of translations of W3C specifications and updated the instructions on how to contribute to our translation efforts.  W3C Liaisons   Liaisons and coordination with numerous organizations and Standards Development Organizations (SDOs) is crucial for W3C to:  make sure standards are interoperable coordinate our respective agenda in Internet governance: W3C participates in ICANN, GIPO, IGF, the I* organizations (ICANN, IETF, ISOC, IAB). ensure at the government liaison level that our standards work is officially recognized when important to our membership so that products based on them (often done by our members) are part of procurement orders. W3C has ARO/PAS status with ISO. W3C participates in the EU MSP and Rolling Plan on Standardization ensure the global set of Web and Internet standards form a compatible stack of technologies, at the technical and policy level (patent regime, fragmentation, use in policy making) promote Standards adoption equally by the industry, the public sector, and the public at large Coralie Mercier, Editor, W3C Marketing & Communications $Id: Overview.html,v 1.60 2019/10/15 12:05:52 coralie Exp $ Copyright \u00a9 2019 W3C \u00ae (MIT, ERCIM, Keio, Beihang) Usage policies apply.",
    "stars": 91,
    "language": null,
    "updated": "2025-06-26",
    "topics": []
  },
  {
    "name": "docwire",
    "full_name": "docwire/docwire",
    "url": "https://github.com/docwire/docwire",
    "description": "DocWire SDK: Award-winning modern data processing in C++20. SourceForge Community Choice & Microsoft support. AI-driven processing. Supports nearly 100 data formats, including email boxes and OCR. Boost efficiency in text extraction, web data extraction, data mining, document analysis. Offline processing is possible for security and confidentiality",
    "stars": 88,
    "language": "C++",
    "updated": "2025-06-29",
    "topics": [
      "api",
      "artificial-intelligence",
      "c",
      "cli",
      "cpp",
      "data-extraction",
      "data-processing",
      "extract-transform-load",
      "linux",
      "machine-learning",
      "macos",
      "parsing",
      "sdk",
      "shell",
      "tensorflow",
      "terminal",
      "text-extraction",
      "text-extraction-from-image",
      "text-mining",
      "windows"
    ]
  },
  {
    "name": "ai-ml-security",
    "full_name": "ossf/ai-ml-security",
    "url": "https://github.com/ossf/ai-ml-security",
    "description": "Working Group on Artificial Intelligence and Machine Learning (AI/ML) Security",
    "stars": 84,
    "language": null,
    "updated": "2025-06-27",
    "topics": []
  },
  {
    "name": "ml-cybersecurity",
    "full_name": "fisher85/ml-cybersecurity",
    "url": "https://github.com/fisher85/ml-cybersecurity",
    "description": "Machine Learning in Cybersecurity",
    "stars": 84,
    "language": "Jupyter Notebook",
    "updated": "2025-06-27",
    "topics": []
  },
  {
    "name": "AISec",
    "full_name": "sdnewhop/AISec",
    "url": "https://github.com/sdnewhop/AISec",
    "description": "Cybersecurity of Machine Learning and Artificial Intelligence ",
    "stars": 73,
    "language": "JavaScript",
    "updated": "2025-05-01",
    "topics": []
  },
  {
    "name": "BigdataAi",
    "full_name": "LiaoWenzhe/BigdataAi",
    "url": "https://github.com/LiaoWenzhe/BigdataAi",
    "description": "\u4ecb\u7ecdLiao Wenzhe \u7684\u4e00\u4e9b\u4e3b\u8981\u4ee3\u8868\u4f5c\u54c1,\u5305\u62ecAIOPS\uff0c\u5f02\u5e38\u68c0\u6d4b\uff0c\u6839\u56e0\u5206\u6790\uff0c\u544a\u8b66\u964d\u566a\uff0c\u5173\u8054\u5206\u6790\uff0c\u6570\u636e\u5b89\u5168\uff0c\u6570\u636e\u6316\u6398\uff0c\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\uff0c\u6587\u672c\u5339\u914d\uff0c\u516c\u5f00\u6f14\u8bb2\uff0c\u601d\u7ef4\u65b9\u5f0f\uff0c\u5b66\u4e60\u65b9\u6cd5\uff0c\u8bfb\u4e66\u9605\u8bfb\u7b49\u3002\u6b22\u8fcestar\u3002                                     Introduce some of Liao Wenzhe's main representative works, including AIOPS, anomaly detection, root cause analysis, alarm noise reduction, correlation analysis, data security, data mining, machine learning, deep learning, text matching, public speech, way of thinking, learning methods, reading, reading, etc. Welcome star.",
    "stars": 71,
    "language": null,
    "updated": "2025-06-17",
    "topics": [
      "ai",
      "data-mining",
      "deep-learning",
      "resume"
    ]
  },
  {
    "name": "machine-learning-in-cybersecurity",
    "full_name": "andrewaeva/machine-learning-in-cybersecurity",
    "url": "https://github.com/andrewaeva/machine-learning-in-cybersecurity",
    "description": "A list of cybersecurity projects that use machine learning techniques",
    "stars": 63,
    "language": null,
    "updated": "2025-06-19",
    "topics": []
  },
  {
    "name": "awsome_kali_MCPServers",
    "full_name": "ccq1/awsome_kali_MCPServers",
    "url": "https://github.com/ccq1/awsome_kali_MCPServers",
    "description": "awsome kali MCPServers is a set of MCP servers tailored for Kali Linux, designed to empower AI Agents in reverse engineering and security testing. It offers flexible network analysis, target sniffing, traffic analysis, binary understanding, and automation, enhancing AI-driven workflows.",
    "stars": 62,
    "language": "Python",
    "updated": "2025-06-30",
    "topics": [
      "agent",
      "kali-linux",
      "llm",
      "mcp-server",
      "security",
      "tools"
    ]
  },
  {
    "name": "viper",
    "full_name": "ozanunal0/viper",
    "url": "https://github.com/ozanunal0/viper",
    "description": "\ud83d\udee1\ufe0f VIPER: Stay ahead of threats with AI-driven vulnerability intelligence. Prioritize CVEs effectively using NVD, EPSS, CISA KEV, and Google Gemini insights, all on an interactive dashboard",
    "stars": 60,
    "language": "Python",
    "updated": "2025-06-28",
    "topics": [
      "ai",
      "cisa-kev",
      "claude-desktop",
      "cve",
      "cybersecurity",
      "epss",
      "llm",
      "mcp",
      "nvd",
      "ollama",
      "python",
      "threat-intelligence",
      "vulnerability-management"
    ]
  },
  {
    "name": "AiCSA",
    "full_name": "GhostTroops/AiCSA",
    "url": "https://github.com/GhostTroops/AiCSA",
    "description": "GPT AiCSA(Code security audit)\uff0cSAST\uff08Static Application Security Testing\uff0c\u9759\u6001\u5e94\u7528\u7a0b\u5e8f\u5b89\u5168\u6d4b\u8bd5\uff09\uff0cJAR security analysis, static vulnerability and vulnerability analysis of various programming language codes",
    "stars": 60,
    "language": "JavaScript",
    "updated": "2025-04-15",
    "topics": [
      "ai",
      "chatgpt",
      "code-security-audit",
      "deserialization-vulnerability",
      "gpt-4",
      "gpt-security",
      "jar-vulnerability-analysis",
      "sast"
    ]
  },
  {
    "name": "AIHTTPAnalyzer",
    "full_name": "alpernae/AIHTTPAnalyzer",
    "url": "https://github.com/alpernae/AIHTTPAnalyzer",
    "description": "AIHTTPAnalyzer revolutionizes web application security testing by bringing artificial intelligence capabilities to Burp Suite. This innovative extension harnesses the power of AI to automate vulnerability detection, provide intelligent analysis, and assist security professionals in identifying complex security issues.",
    "stars": 57,
    "language": "Java",
    "updated": "2025-06-23",
    "topics": [
      "ai",
      "ai-security",
      "application-security",
      "artificial-intelligence",
      "bugbounty",
      "bugbounty-tool",
      "burp",
      "burp-extensions",
      "burpsuite",
      "extension",
      "generative-ai",
      "google-ai",
      "offensive-security",
      "web-security",
      "websecurity"
    ]
  },
  {
    "name": "Mr.-CrackBot-AI-Nano",
    "full_name": "salvadordata/Mr.-CrackBot-AI-Nano",
    "url": "https://github.com/salvadordata/Mr.-CrackBot-AI-Nano",
    "description": "Mr. CrackBot AI uses the NVIDIA Jetson Nano 4GB to perform AI-driven penetration testing. It combines GPU-accelerated password cracking with Wi-Fi deauthentication and handshake capture. Blending AI with traditional security tools, it offers a powerful, compact solution for ethical hacking and network analysis.",
    "stars": 56,
    "language": "Python",
    "updated": "2025-06-26",
    "topics": []
  },
  {
    "name": "javascript-basic-program",
    "full_name": "sanusanth/javascript-basic-program",
    "url": "https://github.com/sanusanth/javascript-basic-program",
    "description": "What is JavaScript and what does it do?   Before you start learning something new, it\u2019s important to understand exactly what it is and what it does. This is especially useful when it comes to mastering a new programming language.  In simple terms, JavaScript is a programming language used to make websites interactive. If you think about the basic makeup of a website, you have HTML, which describes and defines the basic content and structure of the website, then you have CSS, which tells the browser how this HTML content should be displayed\u2014determining things like color and font. With just HTML and CSS, you have a website that looks good but doesn\u2019t actually do much. JavaScript brings the website to life by adding functionality. JavaScript is responsible for elements that the user can interact with, such as drop-down menus, modal windows, and contact forms. It is also used to create things like animations, video players, and interactive maps.  Nowadays, JavaScript is an all-purpose programming language\u2014meaning it runs across the entire software stack. The most popular application of JavaScript is on the client side (aka frontend), but since Node.js came on the scene, many people run JavaScript on the server side (aka backend) as well. When used on the client side, JavaScript code is read, interpreted, and executed in the user\u2019s web browser. When used on the server side, it is run on a remote computer. You can learn more about the difference between frontend and backend programming here.  JavaScript isn\u2019t only used to create websites. It can also be used to build browser-based games and, with the help of certain frameworks, mobile apps for different operating systems. The creation of new libraries and frameworks is also making it possible to build backend programs with JavaScript, such as web apps and server apps.   Is it still worth learning JavaScript in 2021? The world of web development is constantly moving. With so many new tools popping up all the time, it can be extremely difficult to know where you should focus your efforts. As an aspiring developer, you\u2019ll want to make sure that what you\u2019re learning is still relevant in today\u2019s industry.  If you\u2019re having doubts about JavaScript, it\u2019s important to know that, since its creation in 1995, JavaScript is pretty much everywhere on the web\u2014and that\u2019s not likely to change any time soon. According to the 2020 StackOverflow developer survey, JavaScript is the most commonly used programming language for the eighth year in a row. It is currently used by 94.5% of all websites and, despite originally being designed as a client-side language, JavaScript has now made its way to the server-side of websites (thanks to Node.js), mobile devices (thanks to React Native and Ionic) and desktop (courtesy of Electron).  As long as people are interacting with the web, you can assume that JavaScript is highly relevant\u2014there\u2019s no doubt that this is a language worth knowing! With that in mind, let\u2019s look at some of the key benefits of becoming a JavaScript expert.   Why learn JavaScript? The most obvious reason for learning JavaScript is if you have hopes of becoming a web developer. Even if you haven\u2019t got your heart set on a tech career, being proficient in JavaScript will enable you to build websites from scratch\u2014a pretty useful skill to have in today\u2019s job market!  If you do want to become a web developer, here are some of the main reasons why you should learn JavaScript:   JavaScript experts are versatile  JavaScript is an extremely versatile language. Once you\u2019ve mastered it, the possibilities are endless: you can code on the client-side (frontend) using Angular and on the server-side (backend) using Node.js. You can also develop web, mobile, and desktop apps using React, React Native, and Electron, and you can even get involved in machine learning.  If you want to become a frontend developer, JavaScript is a prerequisite. However, that\u2019s not the only career path open to you as a JavaScript expert. Mastering this key programming language could see you go on to work in full-stack development, games development, information security software engineering, machine learning, and artificial intelligence\u2014to name just a few!  Ultimately, if you want any kind of development or engineering career, proficiency in JavaScript is a must.  JavaScript experts are in-demand (and well-paid) JavaScript is the most popular programming language in the world, so it\u2019s no wonder that JavaScript is one of the most sought-after skills in the web development industry today.  According to the Devskiller IT Skills and Hiring Report 2020, 72% of companies are looking to hire JavaScript experts. Enter the search term \u201cJavaScript\u201d on job site Indeed and you\u2019ll find over 40,000 jobs requiring this skill (in the US). Run the same search on LinkedIn and the results are in excess of 125,000.   At the same time, the global demand for JavaScript seems to outweigh the expertise available on the market. According to this 2018 HackerRank report, 48% of employers worldwide need developers with JavaScript skills, while only 42% of student developers claim to be proficient in JavaScript. And, in their most recent report for 2020, HackerRank once again reports that JavaScript is the most popular language that hiring mangers look for in a web developer candidate.  Not only are JavaScript experts in demand\u2014they are also well-paid. In the United States, JavaScript developers earn an average yearly salary of $111,953 per year. We\u2019ve covered this topic in more detail in our JavaScript salary guide, but as you can see, learning JavaScript can really boost your earning potential as a developer.   JavaScript is beginner-friendly Compared to many other programming languages, JavaScript offers one of the more beginner-friendly entry points into the world of coding. The great thing about JavaScript is that it comes installed on every modern web browser\u2014there\u2019s no need to set up any kind of development environment, which means you can start coding with JavaScript right away!  Another advantage of learning JavaScript as your first programming language is that you get instant feedback; with a minimal amount of JavaScript code, you\u2019ll immediately see visible results. There\u2019s also a huge JavaScript community on sites like Stack Overflow, so you\u2019ll find plenty of support as you learn.  Not only is JavaScript beginner-friendly; it will also set you up with some extremely valuable transferable skills. JavaScript supports object-oriented, functional, and imperative styles of programming\u2014skills which can be transferred to any new language you might learn later on, such as Python, Java, or C++. JavaScript provides a crucial introduction to key principles and practices that you\u2019ll take with you throughout your career as a developer.   Should you learn plain JavaScript first or can you skip to frameworks and libraries?  When deciding whether or not to learn JavaScript, what you\u2019re really asking is whether or not you should learn \u201cvanilla\u201d JavaScript. Vanilla JavaScript just means plain JavaScript without any libraries or frameworks. Let\u2019s explore what this means in more detail now.  What is meant by vanilla JavaScript, libraries, and frameworks?  If you research the term \u201cvanilla JavaScript\u201d, you might run into some confusion; however, all you need to know is that vanilla JavaScript is used to refer to native, standards-based, non-extended JavaScript. There is no difference between vanilla JavaScript and JavaScript\u2014it\u2019s just there to emphasize the usage of plain JavaScript without the use of libraries and frameworks.  So what are libraries and frameworks? JavaScript libraries and frameworks both contain sets of prewritten, ready-to-use JavaScript code\u2014but they\u2019re not the same thing. You can think of a framework as your blueprint for building a website: it gives you a structure to work from, and contains ready-made components and tools that help you to build certain elements much quicker than if you were to code them from scratch. Some popular JavaScript frameworks include Angular, React, Vue, and Node.js.  Frameworks also contain libraries. Libraries are smaller than frameworks, and tend to be used for more specific cases. A JavaScript library contains sets of JavaScript code which can be called upon to implement certain functions and features. Let\u2019s imagine you want to code a particular element into your website. You could write, say, ten lines of JavaScript from scratch\u2014or you could take the condensed, ready-made version from your chosen JavaScript library. Some examples of JavaScript libraries include jQuery, Lodash, and Underscore.  The easiest way to understand how frameworks and libraries work together is to imagine you are building a house. The framework provides the foundation and the structure, while the library enables you to add in ready-made components (like furniture) rather than building your own from scratch.  You can learn more about the relationship between languages and libraries in this post explaining the main differences between JavaScript and jQuery. For now, let\u2019s go back to our original question: How important is it to learn vanilla JavaScript?  Should you learn vanilla JavaScript first? When it comes to learning JavaScript, it can be tempting to skip ahead to those time-saving frameworks and libraries we just talked about\u2014and many developers do. However, there are many compelling arguments for learning plain JavaScript first.  While JavaScript frameworks may help you get the job done quicker, there\u2019s only so far you can go if you don\u2019t understand the core concepts behind these frameworks. Frontend developer Abhishek Nagekar describes how not learning vanilla JavaScript came back to bite him when he started learning the JavaScript frameworks Node and Express:  \u201cAs I went to write more and more code in Node and Express, I began to get stuck at even the tiniest problems. Suddenly, I was surrounded with words like callbacks, closures, event loop and prototype. It felt like I got a reintroduction to JavaScript, but this time, it was not a toddler playing in its cradle, it was something of a mysterious monster, challenging me on every other step for not having taken it seriously.\u201d   The above Tweet references a long-running joke within the developer community, and although it dates way back to 2015, it\u2019s still highly relevant today. If you want to become a developer who can innovate, not just execute, you need to understand the underlying principles of the web\u2014not just the shortcuts. This means learning vanilla JavaScript before you move on to frameworks. In fact, understanding plain JavaScript will help you later on when it comes to deciding whether to use a framework for a certain project, and if so, which framework to use.     Why Study JavaScript?  JavaScript is one of the 3 languages all web developers must learn:     1. HTML to define the content of web pages     2. CSS to specify the layout of web pages     3. JavaScript to program the behavior of web pages   Learning Speed  In this tutorial, the learning speed is your choice.  Everything is up to you.  If you are struggling, take a break, or re-read the material.  Always make sure you understand all the \"Try-it-Yourself\" examples.  The only way to become a clever programmer is to: Practice. Practice. Practice. Code. Code. Code !  Commonly Asked Questions  How do I get JavaScript?  Where can I download JavaScript?  Is JavaScript Free?  You don't have to get or download JavaScript.  JavaScript is already running in your browser on your computer, on your tablet, and on your smart-phone.  JavaScript is free to use for everyone.",
    "stars": 54,
    "language": null,
    "updated": "2025-06-07",
    "topics": []
  },
  {
    "name": "lucidity-mcp",
    "full_name": "hyperb1iss/lucidity-mcp",
    "url": "https://github.com/hyperb1iss/lucidity-mcp",
    "description": "AI-powered code quality analysis using MCP to help AI assistants review code more effectively. Analyze git changes for complexity, security issues, and more through structured prompts.",
    "stars": 46,
    "language": "Python",
    "updated": "2025-06-24",
    "topics": [
      "ai-tools",
      "claude",
      "code-analysis",
      "code-quality",
      "code-review",
      "cursor",
      "developer-tools",
      "fastmcp",
      "git-analysis",
      "language-agnostic",
      "mcp",
      "prompts",
      "python",
      "static-analysis",
      "vibes"
    ]
  },
  {
    "name": "On-Guard",
    "full_name": "Ken98045/On-Guard",
    "url": "https://github.com/Ken98045/On-Guard",
    "description": "Adds Artificial Intelligence to almost any security camera that supports HTTP, ONVIF or FTP.  It uses DeepStack as the AI engine.  It allows the user to easily create areas in a photo that should trigger an action (HTTP/email/MQTT) or ignore activity in that area.  It can dramatically reduce the incidents of picture false alarms.  It can optionally interact wtih Blue Iris.",
    "stars": 44,
    "language": "Rich Text Format",
    "updated": "2024-10-26",
    "topics": []
  },
  {
    "name": "References",
    "full_name": "Aryia-Behroziuan/References",
    "url": "https://github.com/Aryia-Behroziuan/References",
    "description": " Poole, Mackworth & Goebel 1998, p. 1.  Russell & Norvig 2003, p. 55.  Definition of AI as the study of intelligent agents: Poole, Mackworth & Goebel (1998), which provides the version that is used in this article. These authors use the term \"computational intelligence\" as a synonym for artificial intelligence.[1] Russell & Norvig (2003) (who prefer the term \"rational agent\") and write \"The whole-agent view is now widely accepted in the field\".[2] Nilsson 1998 Legg & Hutter 2007  Russell & Norvig 2009, p. 2.  McCorduck 2004, p. 204  Maloof, Mark. \"Artificial Intelligence: An Introduction, p. 37\" (PDF). georgetown.edu. Archived (PDF) from the original on 25 August 2018.  \"How AI Is Getting Groundbreaking Changes In Talent Management And HR Tech\". Hackernoon. Archived from the original on 11 September 2019. Retrieved 14 February 2020.  Schank, Roger C. (1991). \"Where's the AI\". AI magazine. Vol. 12 no. 4. p. 38.  Russell & Norvig 2009.  \"AlphaGo \u2013 Google DeepMind\". Archived from the original on 10 March 2016.  Allen, Gregory (April 2020). \"Department of Defense Joint AI Center - Understanding AI Technology\" (PDF). AI.mil - The official site of the Department of Defense Joint Artificial Intelligence Center. Archived (PDF) from the original on 21 April 2020. Retrieved 25 April 2020.  Optimism of early AI: * Herbert Simon quote: Simon 1965, p. 96 quoted in Crevier 1993, p. 109. * Marvin Minsky quote: Minsky 1967, p. 2 quoted in Crevier 1993, p. 109.  Boom of the 1980s: rise of expert systems, Fifth Generation Project, Alvey, MCC, SCI: * McCorduck 2004, pp. 426\u2013441 * Crevier 1993, pp. 161\u2013162,197\u2013203, 211, 240 * Russell & Norvig 2003, p. 24 * NRC 1999, pp. 210\u2013211 * Newquist 1994, pp. 235\u2013248  First AI Winter, Mansfield Amendment, Lighthill report * Crevier 1993, pp. 115\u2013117 * Russell & Norvig 2003, p. 22 * NRC 1999, pp. 212\u2013213 * Howe 1994 * Newquist 1994, pp. 189\u2013201  Second AI winter: * McCorduck 2004, pp. 430\u2013435 * Crevier 1993, pp. 209\u2013210 * NRC 1999, pp. 214\u2013216 * Newquist 1994, pp. 301\u2013318  AI becomes hugely successful in the early 21st century * Clark 2015  Pamela McCorduck (2004, p. 424) writes of \"the rough shattering of AI in subfields\u2014vision, natural language, decision theory, genetic algorithms, robotics ... and these with own sub-subfield\u2014that would hardly have anything to say to each other.\"  This list of intelligent traits is based on the topics covered by the major AI textbooks, including: * Russell & Norvig 2003 * Luger & Stubblefield 2004 * Poole, Mackworth & Goebel 1998 * Nilsson 1998  Kolata 1982.  Maker 2006.  Biological intelligence vs. intelligence in general: Russell & Norvig 2003, pp. 2\u20133, who make the analogy with aeronautical engineering. McCorduck 2004, pp. 100\u2013101, who writes that there are \"two major branches of artificial intelligence: one aimed at producing intelligent behavior regardless of how it was accomplished, and the other aimed at modeling intelligent processes found in nature, particularly human ones.\" Kolata 1982, a paper in Science, which describes McCarthy's indifference to biological models. Kolata quotes McCarthy as writing: \"This is AI, so we don't care if it's psychologically real\".[19] McCarthy recently reiterated his position at the AI@50 conference where he said \"Artificial intelligence is not, by definition, simulation of human intelligence\".[20].  Neats vs. scruffies: * McCorduck 2004, pp. 421\u2013424, 486\u2013489 * Crevier 1993, p. 168 * Nilsson 1983, pp. 10\u201311  Symbolic vs. sub-symbolic AI: * Nilsson (1998, p. 7), who uses the term \"sub-symbolic\".  General intelligence (strong AI) is discussed in popular introductions to AI: * Kurzweil 1999 and Kurzweil 2005  See the Dartmouth proposal, under Philosophy, below.  McCorduck 2004, p. 34.  McCorduck 2004, p. xviii.  McCorduck 2004, p. 3.  McCorduck 2004, pp. 340\u2013400.  This is a central idea of Pamela McCorduck's Machines Who Think. She writes: \"I like to think of artificial intelligence as the scientific apotheosis of a venerable cultural tradition.\"[26] \"Artificial intelligence in one form or another is an idea that has pervaded Western intellectual history, a dream in urgent need of being realized.\"[27] \"Our history is full of attempts\u2014nutty, eerie, comical, earnest, legendary and real\u2014to make artificial intelligences, to reproduce what is the essential us\u2014bypassing the ordinary means. Back and forth between myth and reality, our imaginations supplying what our workshops couldn't, we have engaged for a long time in this odd form of self-reproduction.\"[28] She traces the desire back to its Hellenistic roots and calls it the urge to \"forge the Gods.\"[29]  \"Stephen Hawking believes AI could be mankind's last accomplishment\". BetaNews. 21 October 2016. Archived from the original on 28 August 2017.  Lombardo P, Boehm I, Nairz K (2020). \"RadioComics \u2013 Santa Claus and the future of radiology\". Eur J Radiol. 122 (1): 108771. doi:10.1016/j.ejrad.2019.108771. PMID 31835078.  Ford, Martin; Colvin, Geoff (6 September 2015). \"Will robots create more jobs than they destroy?\". The Guardian. Archived from the original on 16 June 2018. Retrieved 13 January 2018.  AI applications widely used behind the scenes: * Russell & Norvig 2003, p. 28 * Kurzweil 2005, p. 265 * NRC 1999, pp. 216\u2013222 * Newquist 1994, pp. 189\u2013201  AI in myth: * McCorduck 2004, pp. 4\u20135 * Russell & Norvig 2003, p. 939  AI in early science fiction. * McCorduck 2004, pp. 17\u201325  Formal reasoning: * Berlinski, David (2000). The Advent of the Algorithm. Harcourt Books. ISBN 978-0-15-601391-8. OCLC 46890682. Archived from the original on 26 July 2020. Retrieved 22 August 2020.  Turing, Alan (1948), \"Machine Intelligence\", in Copeland, B. Jack (ed.), The Essential Turing: The ideas that gave birth to the computer age, Oxford: Oxford University Press, p. 412, ISBN 978-0-19-825080-7  Russell & Norvig 2009, p. 16.  Dartmouth conference: * McCorduck 2004, pp. 111\u2013136 * Crevier 1993, pp. 47\u201349, who writes \"the conference is generally recognized as the official birthdate of the new science.\" * Russell & Norvig 2003, p. 17, who call the conference \"the birth of artificial intelligence.\" * NRC 1999, pp. 200\u2013201  McCarthy, John (1988). \"Review of The Question of Artificial Intelligence\". Annals of the History of Computing. 10 (3): 224\u2013229., collected in McCarthy, John (1996). \"10. Review of The Question of Artificial Intelligence\". Defending AI Research: A Collection of Essays and Reviews. CSLI., p. 73, \"[O]ne of the reasons for inventing the term \"artificial intelligence\" was to escape association with \"cybernetics\". Its concentration on analog feedback seemed misguided, and I wished to avoid having either to accept Norbert (not Robert) Wiener as a guru or having to argue with him.\"  Hegemony of the Dartmouth conference attendees: * Russell & Norvig 2003, p. 17, who write \"for the next 20 years the field would be dominated by these people and their students.\" * McCorduck 2004, pp. 129\u2013130  Russell & Norvig 2003, p. 18.  Schaeffer J. (2009) Didn't Samuel Solve That Game?. In: One Jump Ahead. Springer, Boston, MA  Samuel, A. L. (July 1959). \"Some Studies in Machine Learning Using the Game of Checkers\". IBM Journal of Research and Development. 3 (3): 210\u2013229. CiteSeerX 10.1.1.368.2254. doi:10.1147/rd.33.0210.  \"Golden years\" of AI (successful symbolic reasoning programs 1956\u20131973): * McCorduck 2004, pp. 243\u2013252 * Crevier 1993, pp. 52\u2013107 * Moravec 1988, p. 9 * Russell & Norvig 2003, pp. 18\u201321 The programs described are Arthur Samuel's checkers program for the IBM 701, Daniel Bobrow's STUDENT, Newell and Simon's Logic Theorist and Terry Winograd's SHRDLU.  DARPA pours money into undirected pure research into AI during the 1960s: * McCorduck 2004, p. 131 * Crevier 1993, pp. 51, 64\u201365 * NRC 1999, pp. 204\u2013205  AI in England: * Howe 1994  Lighthill 1973.  Expert systems: * ACM 1998, I.2.1 * Russell & Norvig 2003, pp. 22\u201324 * Luger & Stubblefield 2004, pp. 227\u2013331 * Nilsson 1998, chpt. 17.4 * McCorduck 2004, pp. 327\u2013335, 434\u2013435 * Crevier 1993, pp. 145\u201362, 197\u2013203 * Newquist 1994, pp. 155\u2013183  Mead, Carver A.; Ismail, Mohammed (8 May 1989). Analog VLSI Implementation of Neural Systems (PDF). The Kluwer International Series in Engineering and Computer Science. 80. Norwell, MA: Kluwer Academic Publishers. doi:10.1007/978-1-4613-1639-8. ISBN 978-1-4613-1639-8. Archived from the original (PDF) on 6 November 2019. Retrieved 24 January 2020.  Formal methods are now preferred (\"Victory of the neats\"): * Russell & Norvig 2003, pp. 25\u201326 * McCorduck 2004, pp. 486\u2013487  McCorduck 2004, pp. 480\u2013483.  Markoff 2011.  \"Ask the AI experts: What's driving today's progress in AI?\". McKinsey & Company. Archived from the original on 13 April 2018. Retrieved 13 April 2018.  Administrator. \"Kinect's AI breakthrough explained\". i-programmer.info. Archived from the original on 1 February 2016.  Rowinski, Dan (15 January 2013). \"Virtual Personal Assistants & The Future Of Your Smartphone [Infographic]\". ReadWrite. Archived from the original on 22 December 2015.  \"Artificial intelligence: Google's AlphaGo beats Go master Lee Se-dol\". BBC News. 12 March 2016. Archived from the original on 26 August 2016. Retrieved 1 October 2016.  Metz, Cade (27 May 2017). \"After Win in China, AlphaGo's Designers Explore New AI\". Wired. Archived from the original on 2 June 2017.  \"World's Go Player Ratings\". May 2017. Archived from the original on 1 April 2017.  \"\u67ef\u6d01\u8fce19\u5c81\u751f\u65e5 \u96c4\u8e1e\u4eba\u7c7b\u4e16\u754c\u6392\u540d\u7b2c\u4e00\u5df2\u4e24\u5e74\" (in Chinese). May 2017. Archived from the original on 11 August 2017.  Clark, Jack (8 December 2015). \"Why 2015 Was a Breakthrough Year in Artificial Intelligence\". Bloomberg News. Archived from the original on 23 November 2016. Retrieved 23 November 2016. After a half-decade of quiet breakthroughs in artificial intelligence, 2015 has been a landmark year. Computers are smarter and learning faster than ever.  \"Reshaping Business With Artificial Intelligence\". MIT Sloan Management Review. Archived from the original on 19 May 2018. Retrieved 2 May 2018.  Lorica, Ben (18 December 2017). \"The state of AI adoption\". O'Reilly Media. Archived from the original on 2 May 2018. Retrieved 2 May 2018.  Allen, Gregory (6 February 2019). \"Understanding China's AI Strategy\". Center for a New American Security. Archived from the original on 17 March 2019.  \"Review | How two AI superpowers \u2013 the U.S. and China \u2013 battle for supremacy in the field\". Washington Post. 2 November 2018. Archived from the original on 4 November 2018. Retrieved 4 November 2018.  at 10:11, Alistair Dabbs 22 Feb 2019. \"Artificial Intelligence: You know it isn't real, yeah?\". www.theregister.co.uk. Archived from the original on 21 May 2020. Retrieved 22 August 2020.  \"Stop Calling it Artificial Intelligence\". Archived from the original on 2 December 2019. Retrieved 1 December 2019.  \"AI isn't taking over the world \u2013 it doesn't exist yet\". GBG Global website. Archived from the original on 11 August 2020. Retrieved 22 August 2020.  Kaplan, Andreas; Haenlein, Michael (1 January 2019). \"Siri, Siri, in my hand: Who's the fairest in the land? On the interpretations, illustrations, and implications of artificial intelligence\". Business Horizons. 62 (1): 15\u201325. doi:10.1016/j.bushor.2018.08.004.  Domingos 2015, Chapter 5.  Domingos 2015, Chapter 7.  Lindenbaum, M., Markovitch, S., & Rusakov, D. (2004). Selective sampling for nearest neighbor classifiers. Machine learning, 54(2), 125\u2013152.  Domingos 2015, Chapter 1.  Intractability and efficiency and the combinatorial explosion: * Russell & Norvig 2003, pp. 9, 21\u201322  Domingos 2015, Chapter 2, Chapter 3.  Hart, P. E.; Nilsson, N. J.; Raphael, B. (1972). \"Correction to \"A Formal Basis for the Heuristic Determination of Minimum Cost Paths\"\". SIGART Newsletter (37): 28\u201329. doi:10.1145/1056777.1056779. S2CID 6386648.  Domingos 2015, Chapter 2, Chapter 4, Chapter 6.  \"Can neural network computers learn from experience, and if so, could they ever become what we would call 'smart'?\". Scientific American. 2018. Archived from the original on 25 March 2018. Retrieved 24 March 2018.  Domingos 2015, Chapter 6, Chapter 7.  Domingos 2015, p. 286.  \"Single pixel change fools AI programs\". BBC News. 3 November 2017. Archived from the original on 22 March 2018. Retrieved 12 March 2018.  \"AI Has a Hallucination Problem That's Proving Tough to Fix\". WIRED. 2018. Archived from the original on 12 March 2018. Retrieved 12 March 2018.  Matti, D.; Ekenel, H. K.; Thiran, J. P. (2017). Combining LiDAR space clustering and convolutional neural networks for pedestrian detection. 2017 14th IEEE International Conference on Advanced Video and Signal Based Surveillance (AVSS). pp. 1\u20136. arXiv:1710.06160. doi:10.1109/AVSS.2017.8078512. ISBN 978-1-5386-2939-0. S2CID 2401976.  Ferguson, Sarah; Luders, Brandon; Grande, Robert C.; How, Jonathan P. (2015). Real-Time Predictive Modeling and Robust Avoidance of Pedestrians with Uncertain, Changing Intentions. Algorithmic Foundations of Robotics XI. Springer Tracts in Advanced Robotics. 107. Springer, Cham. pp. 161\u2013177. arXiv:1405.5581. doi:10.1007/978-3-319-16595-0_10. ISBN 978-3-319-16594-3. S2CID 8681101.  \"Cultivating Common Sense | DiscoverMagazine.com\". Discover Magazine. 2017. Archived from the original on 25 March 2018. Retrieved 24 March 2018.  Davis, Ernest; Marcus, Gary (24 August 2015). \"Commonsense reasoning and commonsense knowledge in artificial intelligence\". Communications of the ACM. 58 (9): 92\u2013103. doi:10.1145/2701413. S2CID 13583137. Archived from the original on 22 August 2020. Retrieved 6 April 2020.  Winograd, Terry (January 1972). \"Understanding natural language\". Cognitive Psychology. 3 (1): 1\u2013191. doi:10.1016/0010-0285(72)90002-3.  \"Don't worry: Autonomous cars aren't coming tomorrow (or next year)\". Autoweek. 2016. Archived from the original on 25 March 2018. Retrieved 24 March 2018.  Knight, Will (2017). \"Boston may be famous for bad drivers, but it's the testing ground for a smarter self-driving car\". MIT Technology Review. Archived from the original on 22 August 2020. Retrieved 27 March 2018.  Prakken, Henry (31 August 2017). \"On the problem of making autonomous vehicles conform to traffic law\". Artificial Intelligence and Law. 25 (3): 341\u2013363. doi:10.1007/s10506-017-9210-0.  Lieto, Antonio (May 2018). \"The knowledge level in cognitive architectures: Current limitations and possible developments\". Cognitive Systems Research. 48: 39\u201355. doi:10.1016/j.cogsys.2017.05.001. hdl:2318/1665207. S2CID 206868967.  Problem solving, puzzle solving, game playing and deduction: * Russell & Norvig 2003, chpt. 3\u20139, * Poole, Mackworth & Goebel 1998, chpt. 2,3,7,9, * Luger & Stubblefield 2004, chpt. 3,4,6,8, * Nilsson 1998, chpt. 7\u201312  Uncertain reasoning: * Russell & Norvig 2003, pp. 452\u2013644, * Poole, Mackworth & Goebel 1998, pp. 345\u2013395, * Luger & Stubblefield 2004, pp. 333\u2013381, * Nilsson 1998, chpt. 19  Psychological evidence of sub-symbolic reasoning: * Wason & Shapiro (1966) showed that people do poorly on completely abstract problems, but if the problem is restated to allow the use of intuitive social intelligence, performance dramatically improves. (See Wason selection task) * Kahneman, Slovic & Tversky (1982) have shown that people are terrible at elementary problems that involve uncertain reasoning. (See list of cognitive biases for several examples). * Lakoff & N\u00fa\u00f1ez (2000) have controversially argued that even our skills at mathematics depend on knowledge and skills that come from \"the body\", i.e. sensorimotor and perceptual skills. (See Where Mathematics Comes From)  Knowledge representation: * ACM 1998, I.2.4, * Russell & Norvig 2003, pp. 320\u2013363, * Poole, Mackworth & Goebel 1998, pp. 23\u201346, 69\u201381, 169\u2013196, 235\u2013277, 281\u2013298, 319\u2013345, * Luger & Stubblefield 2004, pp. 227\u2013243, * Nilsson 1998, chpt. 18  Knowledge engineering: * Russell & Norvig 2003, pp. 260\u2013266, * Poole, Mackworth & Goebel 1998, pp. 199\u2013233, * Nilsson 1998, chpt. \u224817.1\u201317.4  Representing categories and relations: Semantic networks, description logics, inheritance (including frames and scripts): * Russell & Norvig 2003, pp. 349\u2013354, * Poole, Mackworth & Goebel 1998, pp. 174\u2013177, * Luger & Stubblefield 2004, pp. 248\u2013258, * Nilsson 1998, chpt. 18.3  Representing events and time:Situation calculus, event calculus, fluent calculus (including solving the frame problem): * Russell & Norvig 2003, pp. 328\u2013341, * Poole, Mackworth & Goebel 1998, pp. 281\u2013298, * Nilsson 1998, chpt. 18.2  Causal calculus: * Poole, Mackworth & Goebel 1998, pp. 335\u2013337  Representing knowledge about knowledge: Belief calculus, modal logics: * Russell & Norvig 2003, pp. 341\u2013344, * Poole, Mackworth & Goebel 1998, pp. 275\u2013277  Sikos, Leslie F. (June 2017). Description Logics in Multimedia Reasoning. Cham: Springer. doi:10.1007/978-3-319-54066-5. ISBN 978-3-319-54066-5. S2CID 3180114. Archived from the original on 29 August 2017.  Ontology: * Russell & Norvig 2003, pp. 320\u2013328  Smoliar, Stephen W.; Zhang, HongJiang (1994). \"Content based video indexing and retrieval\". IEEE Multimedia. 1 (2): 62\u201372. doi:10.1109/93.311653. S2CID 32710913.  Neumann, Bernd; M\u00f6ller, Ralf (January 2008). \"On scene interpretation with description logics\". Image and Vision Computing. 26 (1): 82\u2013101. doi:10.1016/j.imavis.2007.08.013.  Kuperman, G. J.; Reichley, R. M.; Bailey, T. C. (1 July 2006). \"Using Commercial Knowledge Bases for Clinical Decision Support: Opportunities, Hurdles, and Recommendations\". Journal of the American Medical Informatics Association. 13 (4): 369\u2013371. doi:10.1197/jamia.M2055. PMC 1513681. PMID 16622160.  MCGARRY, KEN (1 December 2005). \"A survey of interestingness measures for knowledge discovery\". The Knowledge Engineering Review. 20 (1): 39\u201361. doi:10.1017/S0269888905000408. S2CID 14987656.  Bertini, M; Del Bimbo, A; Torniai, C (2006). \"Automatic annotation and semantic retrieval of video sequences using multimedia ontologies\". MM '06 Proceedings of the 14th ACM international conference on Multimedia. 14th ACM international conference on Multimedia. Santa Barbara: ACM. pp. 679\u2013682.  Qualification problem: * McCarthy & Hayes 1969 * Russell & Norvig 2003[page needed] While McCarthy was primarily concerned with issues in the logical representation of actions, Russell & Norvig 2003 apply the term to the more general issue of default reasoning in the vast network of assumptions underlying all our commonsense knowledge.  Default reasoning and default logic, non-monotonic logics, circumscription, closed world assumption, abduction (Poole et al. places abduction under \"default reasoning\". Luger et al. places this under \"uncertain reasoning\"): * Russell & Norvig 2003, pp. 354\u2013360, * Poole, Mackworth & Goebel 1998, pp. 248\u2013256, 323\u2013335, * Luger & Stubblefield 2004, pp. 335\u2013363, * Nilsson 1998, ~18.3.3  Breadth of commonsense knowledge: * Russell & Norvig 2003, p. 21, * Crevier 1993, pp. 113\u2013114, * Moravec 1988, p. 13, * Lenat & Guha 1989 (Introduction)  Dreyfus & Dreyfus 1986.  Gladwell 2005.  Expert knowledge as embodied intuition: * Dreyfus & Dreyfus 1986 (Hubert Dreyfus is a philosopher and critic of AI who was among the first to argue that most useful human knowledge was encoded sub-symbolically. See Dreyfus' critique of AI) * Gladwell 2005 (Gladwell's Blink is a popular introduction to sub-symbolic reasoning and knowledge.) * Hawkins & Blakeslee 2005 (Hawkins argues that sub-symbolic knowledge should be the primary focus of AI research.)  Planning: * ACM 1998, ~I.2.8, * Russell & Norvig 2003, pp. 375\u2013459, * Poole, Mackworth & Goebel 1998, pp. 281\u2013316, * Luger & Stubblefield 2004, pp. 314\u2013329, * Nilsson 1998, chpt. 10.1\u20132, 22  Information value theory: * Russell & Norvig 2003, pp. 600\u2013604  Classical planning: * Russell & Norvig 2003, pp. 375\u2013430, * Poole, Mackworth & Goebel 1998, pp. 281\u2013315, * Luger & Stubblefield 2004, pp. 314\u2013329, * Nilsson 1998, chpt. 10.1\u20132, 22  Planning and acting in non-deterministic domains: conditional planning, execution monitoring, replanning and continuous planning: * Russell & Norvig 2003, pp. 430\u2013449  Multi-agent planning and emergent behavior: * Russell & Norvig 2003, pp. 449\u2013455  Turing 1950.  Solomonoff 1956.  Alan Turing discussed the centrality of learning as early as 1950, in his classic paper \"Computing Machinery and Intelligence\".[120] In 1956, at the original Dartmouth AI summer conference, Ray Solomonoff wrote a report on unsupervised probabilistic machine learning: \"An Inductive Inference Machine\".[121]  This is a form of Tom Mitchell's widely quoted definition of machine learning: \"A computer program is set to learn from an experience E with respect to some task T and some performance measure P if its performance on T as measured by P improves with experience E.\"  Learning: * ACM 1998, I.2.6, * Russell & Norvig 2003, pp. 649\u2013788, * Poole, Mackworth & Goebel 1998, pp. 397\u2013438, * Luger & Stubblefield 2004, pp. 385\u2013542, * Nilsson 1998, chpt. 3.3, 10.3, 17.5, 20  Jordan, M. I.; Mitchell, T. M. (16 July 2015). \"Machine learning: Trends, perspectives, and prospects\". Science. 349 (6245): 255\u2013260. Bibcode:2015Sci...349..255J. doi:10.1126/science.aaa8415. PMID 26185243. S2CID 677218.  Reinforcement learning: * Russell & Norvig 2003, pp. 763\u2013788 * Luger & Stubblefield 2004, pp. 442\u2013449  Natural language processing: * ACM 1998, I.2.7 * Russell & Norvig 2003, pp. 790\u2013831 * Poole, Mackworth & Goebel 1998, pp. 91\u2013104 * Luger & Stubblefield 2004, pp. 591\u2013632  \"Versatile question answering systems: seeing in synthesis\" Archived 1 February 2016 at the Wayback Machine, Mittal et al., IJIIDS, 5(2), 119\u2013142, 2011  Applications of natural language processing, including information retrieval (i.e. text mining) and machine translation: * Russell & Norvig 2003, pp. 840\u2013857, * Luger & Stubblefield 2004, pp. 623\u2013630  Cambria, Erik; White, Bebo (May 2014). \"Jumping NLP Curves: A Review of Natural Language Processing Research [Review Article]\". IEEE Computational Intelligence Magazine. 9 (2): 48\u201357. doi:10.1109/MCI.2014.2307227. S2CID 206451986.  Vincent, James (7 November 2019). \"OpenAI has published the text-generating AI it said was too dangerous to share\". The Verge. Archived from the original on 11 June 2020. Retrieved 11 June 2020.  Machine perception: * Russell & Norvig 2003, pp. 537\u2013581, 863\u2013898 * Nilsson 1998, ~chpt. 6  Speech recognition: * ACM 1998, ~I.2.7 * Russell & Norvig 2003, pp. 568\u2013578  Object recognition: * Russell & Norvig 2003, pp. 885\u2013892  Computer vision: * ACM 1998, I.2.10 * Russell & Norvig 2003, pp. 863\u2013898 * Nilsson 1998, chpt. 6  Robotics: * ACM 1998, I.2.9, * Russell & Norvig 2003, pp. 901\u2013942, * Poole, Mackworth & Goebel 1998, pp. 443\u2013460  Moving and configuration space: * Russell & Norvig 2003, pp. 916\u2013932  Tecuci 2012.  Robotic mapping (localization, etc): * Russell & Norvig 2003, pp. 908\u2013915  Cadena, Cesar; Carlone, Luca; Carrillo, Henry; Latif, Yasir; Scaramuzza, Davide; Neira, Jose; Reid, Ian; Leonard, John J. (December 2016). \"Past, Present, and Future of Simultaneous Localization and Mapping: Toward the Robust-Perception Age\". IEEE Transactions on Robotics. 32 (6): 1309\u20131332. arXiv:1606.05830. Bibcode:2016arXiv160605830C. doi:10.1109/TRO.2016.2624754. S2CID 2596787.  Moravec, Hans (1988). Mind Children. Harvard University Press. p. 15.  Chan, Szu Ping (15 November 2015). \"This is what will happen when robots take over the world\". Archived from the original on 24 April 2018. Retrieved 23 April 2018.  \"IKEA furniture and the limits of AI\". The Economist. 2018. Archived from the original on 24 April 2018. Retrieved 24 April 2018.  Kismet.  Thompson, Derek (2018). \"What Jobs Will the Robots Take?\". The Atlantic. Archived from the original on 24 April 2018. Retrieved 24 April 2018.  Scassellati, Brian (2002). \"Theory of mind for a humanoid robot\". Autonomous Robots. 12 (1): 13\u201324. doi:10.1023/A:1013298507114. S2CID 1979315.  Cao, Yongcan; Yu, Wenwu; Ren, Wei; Chen, Guanrong (February 2013). \"An Overview of Recent Progress in the Study of Distributed Multi-Agent Coordination\". IEEE Transactions on Industrial Informatics. 9 (1): 427\u2013438. arXiv:1207.3231. doi:10.1109/TII.2012.2219061. S2CID 9588126.  Thro 1993.  Edelson 1991.  Tao & Tan 2005.  Poria, Soujanya; Cambria, Erik; Bajpai, Rajiv; Hussain, Amir (September 2017). \"A review of affective computing: From unimodal analysis to multimodal fusion\". Information Fusion. 37: 98\u2013125. doi:10.1016/j.inffus.2017.02.003. hdl:1893/25490.  Emotion and affective computing: * Minsky 2006  Waddell, Kaveh (2018). \"Chatbots Have Entered the Uncanny Valley\". The Atlantic. Archived from the original on 24 April 2018. Retrieved 24 April 2018.  Pennachin, C.; Goertzel, B. (2007). Contemporary Approaches to Artificial General Intelligence. Artificial General Intelligence. Cognitive Technologies. Cognitive Technologies. Berlin, Heidelberg: Springer. doi:10.1007/978-3-540-68677-4_1. ISBN 978-3-540-23733-4.  Roberts, Jacob (2016). \"Thinking Machines: The Search for Artificial Intelligence\". Distillations. Vol. 2 no. 2. pp. 14\u201323. Archived from the original on 19 August 2018. Retrieved 20 March 2018.  \"The superhero of artificial intelligence: can this genius keep it in check?\". the Guardian. 16 February 2016. Archived from the original on 23 April 2018. Retrieved 26 April 2018.  Mnih, Volodymyr; Kavukcuoglu, Koray; Silver, David; Rusu, Andrei A.; Veness, Joel; Bellemare, Marc G.; Graves, Alex; Riedmiller, Martin; Fidjeland, Andreas K.; Ostrovski, Georg; Petersen, Stig; Beattie, Charles; Sadik, Amir; Antonoglou, Ioannis; King, Helen; Kumaran, Dharshan; Wierstra, Daan; Legg, Shane; Hassabis, Demis (26 February 2015). \"Human-level control through deep reinforcement learning\". Nature. 518 (7540): 529\u2013533. Bibcode:2015Natur.518..529M. doi:10.1038/nature14236. PMID 25719670. S2CID 205242740.  Sample, Ian (14 March 2017). \"Google's DeepMind makes AI program that can learn like a human\". the Guardian. Archived from the original on 26 April 2018. Retrieved 26 April 2018.  \"From not working to neural networking\". The Economist. 2016. Archived from the original on 31 December 2016. Retrieved 26 April 2018.  Domingos 2015.  Artificial brain arguments: AI requires a simulation of the operation of the human brain * Russell & Norvig 2003, p. 957 * Crevier 1993, pp. 271 and 279 A few of the people who make some form of the argument: * Moravec 1988 * Kurzweil 2005, p. 262 * Hawkins & Blakeslee 2005 The most extreme form of this argument (the brain replacement scenario) was put forward by Clark Glymour in the mid-1970s and was touched on by Zenon Pylyshyn and John Searle in 1980.  Goertzel, Ben; Lian, Ruiting; Arel, Itamar; de Garis, Hugo; Chen, Shuo (December 2010). \"A world survey of artificial brain projects, Part II: Biologically inspired cognitive architectures\". Neurocomputing. 74 (1\u20133): 30\u201349. doi:10.1016/j.neucom.2010.08.012.  Nilsson 1983, p. 10.  Nils Nilsson writes: \"Simply put, there is wide disagreement in the field about what AI is all about.\"[163]  AI's immediate precursors: * McCorduck 2004, pp. 51\u2013107 * Crevier 1993, pp. 27\u201332 * Russell & Norvig 2003, pp. 15, 940 * Moravec 1988, p. 3  Haugeland 1985, pp. 112\u2013117  The most dramatic case of sub-symbolic AI being pushed into the background was the devastating critique of perceptrons by Marvin Minsky and Seymour Papert in 1969. See History of AI, AI winter, or Frank Rosenblatt.  Cognitive simulation, Newell and Simon, AI at CMU (then called Carnegie Tech): * McCorduck 2004, pp. 139\u2013179, 245\u2013250, 322\u2013323 (EPAM) * Crevier 1993, pp. 145\u2013149  Soar (history): * McCorduck 2004, pp. 450\u2013451 * Crevier 1993, pp. 258\u2013263  McCarthy and AI research at SAIL and SRI International: * McCorduck 2004, pp. 251\u2013259 * Crevier 1993  AI research at Edinburgh and in France, birth of Prolog: * Crevier 1993, pp. 193\u2013196 * Howe 1994  AI at MIT under Marvin Minsky in the 1960s : * McCorduck 2004, pp. 259\u2013305 * Crevier 1993, pp. 83\u2013102, 163\u2013176 * Russell & Norvig 2003, p. 19  Cyc: * McCorduck 2004, p. 489, who calls it \"a determinedly scruffy enterprise\" * Crevier 1993, pp. 239\u2013243 * Russell & Norvig 2003, p. 363\u2212365 * Lenat & Guha 1989  Knowledge revolution: * McCorduck 2004, pp. 266\u2013276, 298\u2013300, 314, 421 * Russell & Norvig 2003, pp. 22\u201323  Frederick, Hayes-Roth; William, Murray; Leonard, Adelman. \"Expert systems\". AccessScience. doi:10.1036/1097-8542.248550.  Embodied approaches to AI: * McCorduck 2004, pp. 454\u2013462 * Brooks 1990 * Moravec 1988  Weng et al. 2001.  Lungarella et al. 2003.  Asada et al. 2009.  Oudeyer 2010.  Revival of connectionism: * Crevier 1993, pp. 214\u2013215 * Russell & Norvig 2003, p. 25  Computational intelligence * IEEE Computational Intelligence Society Archived 9 May 2008 at the Wayback Machine  Hutson, Matthew (16 February 2018). \"Artificial intelligence faces reproducibility crisis\". Science. pp. 725\u2013726. Bibcode:2018Sci...359..725H. doi:10.1126/science.359.6377.725. Archived from the original on 29 April 2018. Retrieved 28 April 2018.  Norvig 2012.  Langley 2011.  Katz 2012.  The intelligent agent paradigm: * Russell & Norvig 2003, pp. 27, 32\u201358, 968\u2013972 * Poole, Mackworth & Goebel 1998, pp. 7\u201321 * Luger & Stubblefield 2004, pp. 235\u2013240 * Hutter 2005, pp. 125\u2013126 The definition used in this article, in terms of goals, actions, perception and environment, is due to Russell & Norvig (2003). Other definitions also include knowledge and learning as additional criteria.  Agent architectures, hybrid intelligent systems: * Russell & Norvig (2003, pp. 27, 932, 970\u2013972) * Nilsson (1998, chpt. 25)  Hierarchical control system: * Albus 2002  Lieto, Antonio; Lebiere, Christian; Oltramari, Alessandro (May 2018). \"The knowledge level in cognitive architectures: Current limitations and possibile developments\". Cognitive Systems Research. 48: 39\u201355. doi:10.1016/j.cogsys.2017.05.001. hdl:2318/1665207. S2CID 206868967.  Lieto, Antonio; Bhatt, Mehul; Oltramari, Alessandro; Vernon, David (May 2018). \"The role of cognitive architectures in general artificial intelligence\". Cognitive Systems Research. 48: 1\u20133. doi:10.1016/j.cogsys.2017.08.003. hdl:2318/1665249. S2CID 36189683.  Russell & Norvig 2009, p. 1.  White Paper: On Artificial Intelligence - A European approach to excellence and trust (PDF). Brussels: European Commission. 2020. p. 1. Archived (PDF) from the original on 20 February 2020. Retrieved 20 February 2020.  CNN 2006.  Using AI to predict flight delays Archived 20 November 2018 at the Wayback Machine, Ishti.org.  N. Aletras; D. Tsarapatsanis; D. Preotiuc-Pietro; V. Lampos (2016). \"Predicting judicial decisions of the European Court of Human Rights: a Natural Language Processing perspective\". PeerJ Computer Science. 2: e93. doi:10.7717/peerj-cs.93.  \"The Economist Explains: Why firms are piling into artificial intelligence\". The Economist. 31 March 2016. Archived from the original on 8 May 2016. Retrieved 19 May 2016.  Lohr, Steve (28 February 2016). \"The Promise of Artificial Intelligence Unfolds in Small Steps\". The New York Times. Archived from the original on 29 February 2016. Retrieved 29 February 2016.  Frangoul, Anmar (14 June 2019). \"A Californian business is using A.I. to change the way we think about energy storage\". CNBC. Archived from the original on 25 July 2020. Retrieved 5 November 2019.  Wakefield, Jane (15 June 2016). \"Social media 'outstrips TV' as news source for young people\". BBC News. Archived from the original on 24 June 2016.  Smith, Mark (22 July 2016). \"So you think you chose to read this article?\". BBC News. Archived from the original on 25 July 2016.  Brown, Eileen. \"Half of Americans do not believe deepfake news could target them online\". ZDNet. Archived from the original on 6 November 2019. Retrieved 3 December 2019.  The Turing test: Turing's original publication: * Turing 1950 Historical influence and philosophical implications: * Haugeland 1985, pp. 6\u20139 * Crevier 1993, p. 24 * McCorduck 2004, pp. 70\u201371 * Russell & Norvig 2003, pp. 2\u20133 and 948  Dartmouth proposal: * McCarthy et al. 1955 (the original proposal) * Crevier 1993, p. 49 (historical significance)  The physical symbol systems hypothesis: * Newell & Simon 1976, p. 116 * McCorduck 2004, p. 153 * Russell & Norvig 2003, p. 18  Dreyfus 1992, p. 156.  Dreyfus criticized the necessary condition of the physical symbol system hypothesis, which he called the \"psychological assumption\": \"The mind can be viewed as a device operating on bits of information according to formal rules.\"[206]  Dreyfus' critique of artificial intelligence: * Dreyfus 1972, Dreyfus & Dreyfus 1986 * Crevier 1993, pp. 120\u2013132 * McCorduck 2004, pp. 211\u2013239 * Russell & Norvig 2003, pp. 950\u2013952,  G\u00f6del 1951: in this lecture, Kurt G\u00f6del uses the incompleteness theorem to arrive at the following disjunction: (a) the human mind is not a consistent finite machine, or (b) there exist Diophantine equations for which it cannot decide whether solutions exist. G\u00f6del finds (b) implausible, and thus seems to have believed the human mind was not equivalent to a finite machine, i.e., its power exceeded that of any finite machine. He recognized that this was only a conjecture, since one could never disprove (b). Yet he considered the disjunctive conclusion to be a \"certain fact\".  The Mathematical Objection: * Russell & Norvig 2003, p. 949 * McCorduck 2004, pp. 448\u2013449 Making the Mathematical Objection: * Lucas 1961 * Penrose 1989 Refuting Mathematical Objection: * Turing 1950 under \"(2) The Mathematical Objection\" * Hofstadter 1979 Background: * G\u00f6del 1931, Church 1936, Kleene 1935, Turing 1937  Graham Oppy (20 January 2015). \"G\u00f6del's Incompleteness Theorems\". Stanford Encyclopedia of Philosophy. Archived from the original on 22 April 2016. Retrieved 27 April 2016. These G\u00f6delian anti-mechanist arguments are, however, problematic, and there is wide consensus that they fail.  Stuart J. Russell; Peter Norvig (2010). \"26.1.2: Philosophical Foundations/Weak AI: Can Machines Act Intelligently?/The mathematical objection\". Artificial Intelligence: A Modern Approach (3rd ed.). Upper Saddle River, NJ: Prentice Hall. ISBN 978-0-13-604259-4. even if we grant that computers have limitations on what they can prove, there is no evidence that humans are immune from those limitations.  Mark Colyvan. An introduction to the philosophy of mathematics. Cambridge University Press, 2012. From 2.2.2, 'Philosophical significance of G\u00f6del's incompleteness results': \"The accepted wisdom (with which I concur) is that the Lucas-Penrose arguments fail.\"  Iphofen, Ron; Kritikos, Mihalis (3 January 2019). \"Regulating artificial intelligence and robotics: ethics by design in a digital society\". Contemporary Social Science: 1\u201315. doi:10.1080/21582041.2018.1563803. ISSN 2158-2041.  \"Ethical AI Learns Human Rights Framework\". Voice of America. Archived from the original on 11 November 2019. Retrieved 10 November 2019.  Crevier 1993, pp. 132\u2013144.  In the early 1970s, Kenneth Colby presented a version of Weizenbaum's ELIZA known as DOCTOR which he promoted as a serious therapeutic tool.[216]  Joseph Weizenbaum's critique of AI: * Weizenbaum 1976 * Crevier 1993, pp. 132\u2013144 * McCorduck 2004, pp. 356\u2013373 * Russell & Norvig 2003, p. 961 Weizenbaum (the AI researcher who developed the first chatterbot program, ELIZA) argued in 1976 that the misuse of artificial intelligence has the potential to devalue human life.  Wendell Wallach (2010). Moral Machines, Oxford University Press.  Wallach, pp 37\u201354.  Wallach, pp 55\u201373.  Wallach, Introduction chapter.  Michael Anderson and Susan Leigh Anderson (2011), Machine Ethics, Cambridge University Press.  \"Machine Ethics\". aaai.org. Archived from the original on 29 November 2014.  Rubin, Charles (Spring 2003). \"Artificial Intelligence and Human Nature\". The New Atlantis. 1: 88\u2013100. Archived from the original on 11 June 2012.  Brooks, Rodney (10 November 2014). \"artificial intelligence is a tool, not a threat\". Archived from the original on 12 November 2014.  \"Stephen Hawking, Elon Musk, and Bill Gates Warn About Artificial Intelligence\". Observer. 19 August 2015. Archived from the original on 30 October 2015. Retrieved 30 October 2015.  Chalmers, David (1995). \"Facing up to the problem of consciousness\". Journal of Consciousness Studies. 2 (3): 200\u2013219. Archived from the original on 8 March 2005. Retrieved 11 October 2018. See also this link Archived 8 April 2011 at the Wayback Machine  Horst, Steven, (2005) \"The Computational Theory of Mind\" Archived 11 September 2018 at the Wayback Machine in The Stanford Encyclopedia of Philosophy  Searle 1980, p. 1.  This version is from Searle (1999), and is also quoted in Dennett 1991, p. 435. Searle's original formulation was \"The appropriately programmed computer really is a mind, in the sense that computers given the right programs can be literally said to understand and have other cognitive states.\" [230] Strong AI is defined similarly by Russell & Norvig (2003, p. 947): \"The assertion that machines could possibly act intelligently ",
    "stars": 42,
    "language": null,
    "updated": "2025-06-30",
    "topics": []
  },
  {
    "name": "adfa2",
    "full_name": "djdprogramming/adfa2",
    "url": "https://github.com/djdprogramming/adfa2",
    "description": "# David's Personal Roadmap to Learning Data Science #### Based on the article [Learn Data Science for free in 2021](https://www.kdnuggets.com/2021/01/learn-data-science-free-2021.html) from KDnuggets. Some additions have been made. ###### I'm new to data science and programming. Some areas of study in this roadmap may be researched to a point of redundancy while materials for other topics could be seriously lacking. As I progress through this learning path, I'll be able to gauge which areas need more (or less) focus and will add and remove resources as needed.  ## Schoolwork ##### Required readings for my Data Science classes. - [ ] [Doing Data Science: Straight Talk from the Frontline](https://www.amazon.com/Doing-Data-Science-Straight-Frontline/dp/1449358659) by Cathy O'Neil & Rachel Schutt   - [ ] 1. Introduction: What is Data Science?   - [ ] 2. Statistical Inference, Exploratory Data Analysis, and the Data Science Process   - [ ] 3. Algorithms   - [ ] 4. Spam Filters, Naive Bayes, and Wrangling   - [ ] 5. Logistic Regression   - [ ] 6. Time Stamps and Financial Modeling   - [ ] 7. Extracting Meaning from Data   - [ ] 8. Recommendation Engines: Building a User-Facing Data Product at Scale   - [ ] 9. Data Visualization and Fraud Detection   - [ ] 10. Social Networks and Data Journalism   - [ ] 11. Causality   - [ ] 12. Epidemiology   - [ ] 13. Lessons Learned from Data Competitions: Data Leakage and Model Evaluation   - [ ] 14. Data Engineering: MapReduce, Pregel, and Hadoop   - [ ] 15. The Students Speak   - [ ] 16. Next-Generation Data Scientists, Hubris, and Ethics   - [ ] [Practical Statistics for Data Scientists: 50 Essential Concepts](https://www.amazon.com/Practical-Statistics-Data-Scientists-Essential/dp/149207294X/ref=sr_1_1?dchild=1&keywords=Practical+Statistics+for+Data+Scientists&qid=1609991269&s=books&sr=1-1) by Peter Bruce, Andrew Bruce & Peter Gedeck   - [ ] 1. Exploratory Data Analysis   - [ ] 2. Data and Sampling Distributions   - [ ] 3. Statistical Experiments and Significance Testing   - [ ] 4. Regression and Prediction   - [ ] 5. Classification   - [ ] 6. Statistical Machine Learning   - [ ] 7. Unsupervised Learning  ## Programming Skills ##### Learn programming basics. - [ ] [Python 3 Basics Tutorial Series](https://www.youtube.com/playlist?list=PLQVvvaa0QuDe8XSftW-RAxdo6OmaeL85M) by sentdex   - [ ] 1. Python 3 Programming Tutorial: Why Python 3? Python 2 vs Python 3 `7:36`   - [ ] 2. Python 3 Programming Tutorial: Installing Python 3 - How to Install Both Python 2 and Python 3 `15:47`   - [ ] 3. Python 3 Programming Tutorial: Print Function and Strings `9:31`   - [ ] 4. Python 3 Programming Tutorial: Math `4:49`   - [ ] 5. Python 3 Programming Tutorial: Variables `4:26`   - [ ] 6. Python 3 Programming Tutorial: While Loop `5:55`   - [ ] 7. Python 3 Programming Tutorial: For Loop `9:05`   - [ ] 8. Python 3 Programming Tutorial: If Statement `4:54`   - [ ] 9. Python 3 Programming Tutorial: If Else `3:20`   - [ ] 10. Python 3 Programming Tutorial: If Elif Else `4:19`   - [ ] 11. Python 3 Programming Tutorial: Functions `3:05`   - [ ] 12. Python 3 Programming Tutorial: Function Parameters `4:00`   - [ ] 13. Python 3 Programming Tutorial: Function Parameter Defaults `6:06`   - [ ] 14. Python 3 Programming Tutorial: Global and Local Variables `6:31`   - [ ] 15. Python 3 Programming Tutorial: Installing Modules `7:44`   - [ ] 16. Python 3 Programming Tutorial: How to Download and Install Python Packages and Modules with Pip `8:32`   - [ ] 17. Python 3 Programming Tutorial: Common Errors `4:49`   - [ ] 18. Python 3 Programming Tutorial: Writing to File `3:35`   - [ ] 19. Python 3 Programming Tutorial: Appending Files `2:42`   - [ ] 20. Python 3 Programming Tutorial: Read from a File `1:49`   - [ ] 21. Python 3 Programming Tutorial: Classes `4:56`   - [ ] 22. Python 3 Programming Tutorial: Frequently Asked Questions `5:33`   - [ ] 23. Python 3 Programming Tutorial: Getting User Input `1:43`   - [ ] 24. Python 3 Programming Tutorial: Statistics (Mean, Standard Deviation) `2:36`   - [ ] 25. Python 3 Programming Tutorial: Module Import Syntax `5:31`   - [ ] 26. Python 3 Programming Tutorial: Making Modules `4:58`   - [ ] 27. Python 3 Programming Tutorial: Lists and Tuples `5:51`   - [ ] 28. Python 3 Programming Tutorial: List Manipulation `9:35`   - [ ] 29. Python 3 Programming Tutorial: Multi-Dimensional List `5:45`   - [ ] 30. Python 3 Programming Tutorial: Reading from a CSV Spreadsheet `9:24`   - [ ] 31. Python 3 Programming Tutorial: Try and Except Error Handlings `7:04`   - [ ] 32. Python 3 Programming Tutorial: Multi-Line Print `3:19`   - [ ] 33. Python 3 Programming Tutorial: Dictionaries `7:11`   - [ ] 34. Python 3 Programming Tutorial: Built-in Functions `10:58`   - [ ] 35. Python 3 Programming Tutorial: OS Module `5:01`   - [ ] 36. Python 3 Programming Tutorial: Sys Module `11:00`   - [ ] 37. Python 3 Programming Tutorial: urllib Module `24:04`   - [ ] 38. Python 3 Programming Tutorial: Regular Expressions/Regex with re `19:58`   - [ ] 39. Python 3 Programming Tutorial: Parsing Websites with re and urllib `7:29`   - [ ] 40. Python 3 Programming Tutorial: Tkinter Module Making Windows `8:03`   - [ ] 41. Python 3 Programming Tutorial: Tkinter Adding Buttons `6:29`   - [ ] 42. Python 3 Programming Tutorial: Tkinter Event Handling `5:40`   - [ ] 43. Python 3 Programming Tutorial: Tkinter Menu Bar `10:25`   - [ ] 44. Python 3 Programming Tutorial: Tkinter Adding Images and Text `11:59`   - [ ] 45. Python 3 Programming Tutorial: Threading Module `18:43`   - [ ] 46. Python 3 Programming Tutorial: cx_freeze Python to .exe `12:08`   - [ ] 47. Python 3 Programming Tutorial: Subprocess Module `13:17`   - [ ] 48. Python 3 Programming Tutorial: Matplotlib Graphing Intro `10:25`   - [ ] 49. Python 3 Programming Tutorial: Matplotlib Labels and Titles `5:03`   - [ ] 50. Python 3 Programming Tutorial: Matplotlib Styles `10:38`   - [ ] 51. Python 3 Programming Tutorial: Matplotlib Legends `4:07`   - [ ] 52. Python 3 Programming Tutorial: Scatter Plots and Bar Charts `6:38`   - [ ] 53. Python 3 Programming Tutorial: Matplotlib Plotting from a CSV `7:21`   - [ ] 54. Python 3 Programming Tutorial: ftplib FTP Transfers Python `8:47`   - [ ] 55. Python 3 Programming Tutorial: Sockets Intro `10:48`   - [ ] 56. Python 3 Programming Tutorial: Sockets Simple Port Scanner `5:08`   - [ ] 57. Python 3 Programming Tutorial: Threaded Port Scanner `9:36`   - [ ] 58. Python 3 Programming Tutorial: Sockets Binding and Listening `5:53`   - [ ] 59. Python 3 Programming Tutorial: Sockets Client Server System `10:27` - [ ] [Intermediate Python Programming](https://www.youtube.com/playlist?list=PLQVvvaa0QuDfju7ADVp5W1GF9jVhjbX-_) by sentdex   - [ ] 1. Intermediate Python Programming: Introduction `7:48`   - [ ] 2. Intermediate Python Programming: String Concatenation and Formatting `13:40`   - [ ] 3. Intermediate Python Programming: Argparse for CLI `10:49`   - [ ] 4. Intermediate Python Programming: List Comprehension and Generator Expressions `6:52`   - [ ] 5. Intermediate Python Programming: More on List Comp and Generators `15:28`   - [ ] 6. Intermediate Python Programming: Timeit Module `11:28`   - [ ] 7. Intermediate Python Programming: Enumerate `4:48`   - [ ] 8. Intermediate Python Programming: Zip `7:23`   - [ ] 9. Intermediate Python Programming: Writing Our Own Generator `11:08`   - [ ] 10. Intermediate Python Programming: Multiprocessing `11:30`   - [ ] 11. Intermediate Python Programming: Getting Returned Values from Processes `4:22`   - [ ] 12. Intermediate Python Programming: Multiprocessing Spider Example `24:18`   - [ ] 13. Intermediate Python Programming: Object Oriented Programming Introductions `11:35`   - [ ] 14. Intermediate Python Programming: Creating an Environment for Our Project `11:49`   - [ ] 15. Intermediate Python Programming: Many Blob Objects `8:30`   - [ ] 16. Intermediate Python Programming: Object Modularity Thoughts `16:41`   - [ ] 17. Intermediate Python Programming: OOP Inheritance `10:17`   - [ ] 18. Intermediate Python Programming: Decorators `8:50`   - [ ] 19. Intermediate Python Programming: Operator Overloading `10:19`   - [ ] 20. Intermediate Python Programming: Detecting Collisions `15:20`   - [ ] 21. Intermediate Python Programming: Special Methods, OOP, Iteration `13:30`   - [ ] 22. Intermediate Python Programming: Logging `15:00`   - [ ] 23. Intermediate Python Programming: Error Handling `6:11`   - [ ] 24. Intermediate Python Programming: --str-- and --repr-- `11:32`   - [ ] 25. Intermediate Python Programming: Args and Kwargs `11:58`   - [ ] 26. Intermediate Python Programming: Asyncio - Asynchronous Programming with Coroutines `28:37` - [ ] [2021 Complete Python Bootcamp From Zero to Hero in Python](https://www.udemy.com/course/complete-python-bootcamp/) by Jose Portilla   - [ ] 1. Course Overview   - [ ] 2. Python Setup   - [ ] 3. Python Object and Data Structure Basics   - [ ] 4. Python Comparison Operators   - [ ] 5. Python Statements   - [ ] 6. Methods and Functions   - [ ] 7. Milestone Project 1   - [ ] 8. Object Oriented Programming   - [ ] 9. Modules and Packages   - [ ] 10. Errors and Exceptions Handlings   - [ ] 11. Milestone Project 2   - [ ] 12. Python Decorators   - [ ] 13. Python Generators   - [ ] 14. Advanced Python Modules   - [ ] 15. Web Scraping with Python   - [ ] 16. Working with Images with Python   - [ ] 17. Working with PDFs and Spreadsheet CSV Files   - [ ] 18. Emails with Python   - [ ] 19. Final Capstone Python Project   - [ ] 20. Advanced Python Objects and Data Structures   - [ ] 21. Bonus Material - Introduction to GUIs - [ ] Build the 5 projects listed in the [5 Intermediate Python Projects](https://www.youtube.com/watch?v=o5sb8ehRSYA&ab_channel=TechWithTim) video by Tech With Tim   - [ ] 1. Build a Website with Django/Flask   - [ ] 2. Use a WebScraper   - [ ] 3. Create a Game with PyGame   - [ ] 4. Build a GUI with Tkinter/PyQt5   - [ ] 5. Robotics/Raspberry Pi Project    ## Data Analysis and Visualization ##### Learn NumPy, Pandas and Matplotlib. - [ ] [Python NumPy Tutorial for Beginners](https://www.youtube.com/watch?v=QUT1VHiLmmI&ab_channel=freeCodeCamp.org) by freeCodeCamp.org `58:09` - [ ] Read the [Introduction to NumPy](https://jakevdp.github.io/PythonDataScienceHandbook/02.00-introduction-to-numpy.html) chapter from the Python Data Science Handbook by Jake VanderPlas   - [ ] 1. Introduction to NumPy   - [ ] 2. Understanding Data Types in Python   - [ ] 3. The Basics of NumPy Arrays   - [ ] 4. Computation on NumPy Arrays: Universal Functions   - [ ] 5. Aggregations: Min, Max, and Everything in Between   - [ ] 6. Computation on Arrays: Broadcasting   - [ ] 7. Comparisons, Masks, and Boolean Logic   - [ ] 8. Fancy Indexing   - [ ] 9. Sorting Arrays   - [ ] 10. Structured Data: NumPy's Structured Arrays - [ ] [Pandas Tutorials](https://www.youtube.com/playlist?list=PL-osiE80TeTsWmV9i9c58mdDCSskIFdDS) by Corey Schafer   - [ ] 1. Python Pandas Tutorial: Getting Started with Data Analysis - Installation and Loading Data `23:01`   - [ ] 2. Python Pandas Tutorial: DataFrame and Series Basics - Selecting Rows and Columns `33:35`   - [ ] 3. Python Pandas Tutorial: Indexes - How to Set, Reset, and Use Indexes `17:27`   - [ ] 4. Python Pandas Tutorial: Filtering - Using Conditionals to Filter Rows and Columns `23:04`   - [ ] 5. Python Pandas Tutorial: Updating Rows and Columns - Modifying Data within DataFrames `40:03`   - [ ] 6. Python Pandas Tutorial: Add/Remove Rows and Columns from DataFrames `16:55`   - [ ] 7. Python Pandas Tutorial: Sorting Data `15:40`   - [ ] 8. Python Pandas Tutorial: Grouping and Aggregating - Analyzing and Exploring Your Data `49:06`   - [ ] 9. Python Pandas Tutorial: Cleaning Data - Casting Data Types and Handling Missing Values `31:54`   - [ ] 10. Python Pandas Tutorial: Working with Dates and Time Series Data `35:41`   - [ ] 11. Python Pandas Tutorial: Reading/Writing Data to Different Sources - Excel, JSON, SQL, Etc. `32:45` - [ ] Read the [Data Manipulation with Pandas](https://jakevdp.github.io/PythonDataScienceHandbook/03.00-introduction-to-pandas.html) chapter from the Python Data Science Handbook by Jake VanderPlas   - [ ] 1. Data Manipulation with Pandas   - [ ] 2. Introducing Pandas Objects   - [ ] 3. Data Indexing and Selection   - [ ] 4. Operating on Data in Pandas   - [ ] 5. Handling Missing Data   - [ ] 6. Hierarchical Indexing   - [ ] 7. Combining Datasets: Concat and Append   - [ ] 8. Combining Datasets: Merge and Join   - [ ] 9. Aggregation and Grouping   - [ ] 10. Pivot Tables   - [ ] 11. Vectorized String Operations   - [ ] 12. Working with Time Series   - [ ] 13. High-Performance Pandas: eval() and query() - [ ] [Matplotlib Tutorials](https://www.youtube.com/playlist?list=PL-osiE80TeTvipOqomVEeZ1HRrcEvtZB_) by Corey Schafer   - [ ] 1. Matplotlib Tutorial: Creating and Customizing Our First Plots `35:01`   - [ ] 2. Matplotlib Tutorial: Bar Charts and Analyzing Data from CSVs `34:26`   - [ ] 3. Matplotlib Tutorial: Pie Charts `17:02`   - [ ] 4. Matplotlib Tutorial: Stack Plots `14:49`   - [ ] 5. Matplotlib Tutorial: Filling Area on Line Plots `15:18`   - [ ] 6. Matplotlib Tutorial: Histograms `16:36`   - [ ] 7. Matplotlib Tutorial: Scatter Plots `21:24`   - [ ] 8. Matplotlib Tutorial: Plotting Time Series Data `17:09`   - [ ] 9. Matplotlib Tutorial: Plotting Live Data in Real-Time `20:34`   - [ ] 10. Matplotlib Tutorial: Subplots `21:22` - [ ] Read the [Visualization with Matplotlib](https://jakevdp.github.io/PythonDataScienceHandbook/04.00-introduction-to-matplotlib.html) chapter from the Python Data Science Handbook by Jake VanderPlas   - [ ] 1. Visualization with Matplotlib   - [ ] 2. Simple Line Plots   - [ ] 3. Simple Scatter Plots   - [ ] 4. Visualizing Errors   - [ ] 5. Density and Contour Plots   - [ ] 6. Histograms, Binnings, and Density   - [ ] 7. Customizing Plot Legends   - [ ] 8. Customizing Colorbars   - [ ] 9. Multiple Subplots   - [ ] 10. Text and Annotation   - [ ] 11. Customizing Ticks   - [ ] 12. Customizing Matplotlib: Configurations and Stylesheets   - [ ] 13. Three-Dimensional Plotting in Matplotlib   - [ ] 14. Geographic Data with Basemap   - [ ] 15. Visualization with Seaborn - [ ] [Python for Data Science - Course for Beginners (Learn Python, Pandas, NumPy, Matplotlib)](https://www.youtube.com/watch?v=LHBE6Q9XlzI&t=2s&ab_channel=freeCodeCamp.org) by freeCodeCamp.org `12:19:51`  ## Data Preprocessing ##### Learn the basics of data preprocessing. - [ ] [Data Cleaning](https://www.kaggle.com/learn/data-cleaning) by Kaggle   - [ ] 1. Handling Missing Values   - [ ] 2. Scaling and Normalization   - [ ] 3. Parsing Dates   - [ ] 4. Character Encodings   - [ ] 5. Inconsistent Data Entry - [ ] Do the [Titanic - Machine Learning from Disaster](https://www.kaggle.com/c/titanic) competition by Kaggle - [ ] Do the [Housing Prices](https://www.kaggle.com/c/home-data-for-ml-course) competition by Kaggle - [ ] [Feature Engineering](https://www.kaggle.com/learn/feature-engineering) by Kaggle   - [ ] 1. Baseline Model   - [ ] 2. Categorical Encodings   - [ ] 3. Feature Generation   - [ ] 4. Feature Selection    ## Databases ##### Learn about databases. - [ ] [Intro to SQL](https://www.kaggle.com/learn/intro-to-sql) by Kaggle   - [ ] 1. Getting Started with SQL and BigQuery   - [ ] 2. Select, From & Where   - [ ] 3. Group By, Having & Count   - [ ] 4. Order By   - [ ] 5. As & With   - [ ] 6. Joining Data - [ ] [Advanced SQL](https://www.kaggle.com/learn/advanced-sql) by Kaggle   - [ ] 1. JOINs and UNIONs   - [ ] 2. Analytic Functions   - [ ] 3. Nested and Repeated Data   - [ ] 4. Writing Efficient Queries - [ ] [MongoDB with Python Crash Course - Tutorial for Beginners](https://www.youtube.com/watch?v=E-1xI85Zog8&ab_channel=freeCodeCamp.org) by freeCodeCamp.org `1:57:33`  ## Machine Learning ##### Taking our first steps into the world of ML. - [ ] [Machine Learning](https://www.coursera.org/learn/machine-learning#syllabus) by Andrew Ng (skipping the MATLAB section)   - [ ] 1. Introduction   - [ ] 2. Linear Regression with One Variable   - [ ] 3. Linear Algebra Review   - [ ] 4. Linear Regression with Multiple Variables   - [ ] 5. Logistic Regression   - [ ] 6. Regularization   - [ ] 7. Neural Networks: Representation   - [ ] 8. Neural Networks: Learning   - [ ] 9: Advice for Applying Machine Learning   - [ ] 10. Machine Learning System Design   - [ ] 11. Support Vector Machines   - [ ] 12. Unsupervised Learning   - [ ] 13. Dimensionality Reduction   - [ ] 14. Anomaly Detection   - [ ] 15. Recommender Systems   - [ ] 16. Large Scale Machine Learning   - [ ] 17. Application Example: Photo OCR - [ ] [Coursera Machine Learning MOOC by Andrew Ng Python Programming Assignments](https://github.com/dibgerge/ml-coursera-python-assignments)   - [ ] Exercise 1   - [ ] Exercise 2   - [ ] Exercise 3   - [ ] Exercise 4   - [ ] Exercise 5   - [ ] Exercise 6   - [ ] Exercise 7   - [ ] Exercise 8 - [ ] Do any [Kaggle](https://www.kaggle.com/) competition - [ ] [Intermediate Machine Learning](https://www.kaggle.com/learn/intermediate-machine-learning) by Kaggle   - [ ] 1. Introduction   - [ ] 2. Missing Values   - [ ] 3. Categorical Variables   - [ ] 4. Pipelines   - [ ] 5. Cross-Validation   - [ ] 6. XGBoost   - [ ] 7. Data Leakage    ## Linear Algebra and Statistics  ##### Learn linear algebra and statistics. - [ ] [Linear Algebra](https://www.khanacademy.org/math/linear-algebra) on Khan Academy   - [ ] 1. Vectors and Spaces   - [ ] 2. Matrix Transformations   - [ ] 3. Alternate Coordinate Systems (Bases) - [ ] [Linear Algebra](https://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/index.htm) on MIT OpenCourseWare   - [ ] Problem Set 1   - [ ] Problem Set 2   - [ ] Problem Set 3   - [ ] Problem Set 4   - [ ] Problem Set 5   - [ ] Problem Set 6   - [ ] Problem Set 7   - [ ] Problem Set 8   - [ ] Problem Set 9   - [ ] Problem Set 10   - [ ] Exam 1   - [ ] Exam 2   - [ ] Exam 3   - [ ] Final Exam - [ ] [Statistics and Probability](https://www.khanacademy.org/math/statistics-probability) on Khan Academy   - [ ] 1. Analyzing Categorical Data   - [ ] 2. Displaying and Comparing Quantitative Data   - [ ] 3. Summarizing Quantitative Data   - [ ] 4. Modeling Data Distributions   - [ ] 5. Exploring Bivariate Numerical Data   - [ ] 6. Study Design   - [ ] 7. Probability   - [ ] 8. Counting, Permutations, and Combinations   - [ ] 9. Random Variables   - [ ] 10. Sampling Distributions   - [ ] 11. Confidence Intervals   - [ ] 12. Significance Tests (Hypothesis Testing)   - [ ] 13. Two-Sample Inference for the Difference Between Groups   - [ ] 14. Inference for Categorical Data (Chi-Square Tests)   - [ ] 15. Advanced Regression (Inference and Transforming)   - [ ] 16. Analysis of Variance (ANOVA) - [ ] [Introduction to Probability and Statistics](https://ocw.mit.edu/courses/mathematics/18-05-introduction-to-probability-and-statistics-spring-2014/index.htm) on MIT OpenCourseWare   - [ ] Problem Set 1   - [ ] Problem Set 2   - [ ] Problem Set 3   - [ ] Problem Set 4   - [ ] Problem Set 5   - [ ] Problem Set 6   - [ ] Problem Set 7   - [ ] Problem Set 8   - [ ] Problem Set 9   - [ ] Exam 1 Practice Questions I   - [ ] Exam 1 Practice Questions II   - [ ] Exam 1 Practice Questions: Long List   - [ ] Exam 1   - [ ] Exam 2 Practice Questions   - [ ] Exam 2   - [ ] Final Exam Practice Questions   - [ ] Final Exam - [ ] [Deep Learning Book](https://www.deeplearningbook.org/) by Ian Goodfellow, Yoshua Bengio & Aaron Courville   - [ ] 1. Introduction   - [ ] 2. Linear Algebra   - [ ] 3. Probability and Information Theory   - [ ] 4. Numerical Computation   - [ ] 5. Machine Learning Basics   - [ ] 6. Deep Feedforward Networks   - [ ] 7. Regularization for Deep Learning   - [ ] 8. Optimization for Training Deep Models   - [ ] 9. Convolutional Networks   - [ ] 10. Sequence Modeling: Recurrent and Recursive Nets   - [ ] 11. Practical Methodology   - [ ] 12. Applications   - [ ] 13. Linear Factor Models   - [ ] 14. Autoencoders   - [ ] 15. Representation Learning   - [ ] 16. Structured Probabilistic Models for Deep Learning   - [ ] 17. Monte Carlo Methods   - [ ] 18. Confronting the Partition Function   - [ ] 19. Approximate Inference   - [ ] 20. Deep Generative Models    ## Deep Learning ##### Learning about deep learning. - [ ] [Practical Deep Learning for Coders](https://course.fast.ai/) by fast.ai   - [ ] Lesson 1   - [ ] Lesson 2   - [ ] Lesson 3   - [ ] Lesson 4   - [ ] Lesson 5   - [ ] Lesson 6   - [ ] Lesson 7   - [ ] Lesson 8 - [ ] [Part 2: Deep Learning from the Foundations](https://course19.fast.ai/part2) by fast.ai   - [ ] Lesson 1   - [ ] Lesson 2   - [ ] Lesson 3   - [ ] Lesson 4   - [ ] Lesson 5   - [ ] Lesson 6   - [ ] Lesson 7   - [ ] Lesson 8   - [ ] Lesson 9   - [ ] Lesson 10   - [ ] Lesson 11   - [ ] Lesson 12   - [ ] Lesson 13   - [ ] Lesson 14 - [ ] [Deep Learning Specialization](https://www.coursera.org/specializations/deep-learning) by Andrew Ng   - [ ] Course 1: Neural Networks and Deep Learning     - [ ] 1. Introduction to Deep Learning     - [ ] 2. Neural Network Basics     - [ ] 3. Shallow Neural Networks     - [ ] 4. Deep Neural Networks   - [ ] Course 2: Improving Deep Neural Networks: Hyperparameter tuning, Regularization and Optimization     - [ ] 1. Practical Aspects of Deep Learning     - [ ] 2. Optimization Algorithms     - [ ] 3. Hyperparameter tuning, Batch Normalization and Programming Frameworks   - [ ] Course 3: Structuring Machine Learning Projects     - [ ] 1. ML Strategy (1)     - [ ] 2. ML Strategy (2)   - [ ] Course 4: Convolutional Neural Networks     - [ ] 1. Foundations of Convolutional Neural Networks     - [ ] 2. Deep Convolutional Models: Case Studies     - [ ] 3. Object Detection     - [ ] 4. Special applications: Face recognition & Neural style transfer   - [ ] Course 5: Sequence Models     - [ ] 1. Recurrent Neural Networks     - [ ] 2. Natural Language Processing & Word Embeddings     - [ ] 3. Sequence Models & Attention Mechanism - [ ] [DeepLearning.AI TensorFlow Developer Professional Certificate](https://www.coursera.org/professional-certificates/tensorflow-in-practice?) by Laurence Moroney   - [ ] Course 1: Introduction to TensorFlow for Artificial Intelligence, Machine Learning, and Deep Learning     - [ ] 1. A New Programming Paradigm     - [ ] 2. Introduction to Computer Vision     - [ ] 3. Enhancing Vision with Convolutional Neural Networks     - [ ] 4. Using Real-World Images   - [ ] Course 2: Convolutional Neural Networks in TensorFlow     - [ ] 1. Exploring a Larger Dataset     - [ ] 2. Augmentation: A Technique to Avoid Overfitting     - [ ] 3. Transfer Learning     - [ ] 4. Multiclass Classifications   - [ ] Course 3: Natural Language Processing in TensorFlow     - [ ] 1. Sentiment in Text     - [ ] 2. Word Embeddings     - [ ] 3. Sequence Models     - [ ] 4. Sequence Models and Literature   - [ ] Course 4: Sequences, Time Series and Prediction     - [ ] 1. Sequences and Prediction     - [ ] 2. Deep Neural Networks for Time Series     - [ ] 3. Recurrent Neural Networks for Time Series     - [ ] 4. Real-World Time Series Data      ##  Cloud for Model Deployment ##### Learn how to build, train, test, and deploy a machine learning model on AWS. - [ ] [AWS Machine Learning Specialty](https://www.youtube.com/playlist?list=PLEF5xKHm-3ZNDvdJpMCLu9xa1oDNvAmMr) by Amazon   - [ ] 1. AWS Training and Certification: Machine Learning `1:31`   - [ ] 2. Build, Train and Deploy Machine Learning Models on AWS with Amazon SageMaker - AWS Online `35:51`   - [ ] 3. AWS re:Invent 2018: Leadership Session: Machine Learning (AIM202-L) `58:01`   - [ ] 4. Machine Learning Models with TensorFlow Using Amazon SageMaker - AWS Online Tech Talks `40:16`   - [ ] 5. AWS re:Invent 2018: Build & Deploy ML Models Quickly & Easily with Amazon SageMaker `57:53`   - [ ] 6. AWS re:Invent 2018: CI/CD for Your Machine Learning Pipeline with Amazon SageMaker `57:13`   - [ ] 7. AWS Berlin Summit 2018 - Building and Running Your First ML Application on Amazon SageMaker `52:54`   - [ ] 8. Predictive Analytics with Amazon SageMaker `1:03:29`   - [ ] 9. AWS re:Invent 2018: AI/ML with Data Lakes: Counterintuitive Consumer Insights in Retail `1:00:10`   - [ ] 10. AWS re:Invent 2018: Industrialize Machine Learning Using CI/CD Techniques (FSV304-i) `45:34`   - [ ] 11. AWS re:Invent 2018: Driving Machine Learning and Analytics Use Cases with AWS Storage (STG302) `40:16`   - [ ] 12. AWS re:Invent 2018: Deep Learning Applications Using TensorFlow (AIM401-R) `1:02:29`   - [ ] 13. AWS re:Invent 2017: Machine Learning State of the Union (MCL210) `1:00:55`   - [ ] 14. AWS re:Invent 2017: Containerized Machine Learning on AWS (CON309) `1:03:21`   - [ ] 15. AWS re:Invent 2017: Introduction to Deep Learning (MCL205) `46:17`   - [ ] 16. Continuous Delivery with AWS CodePipeline and Amazon SageMaker `25:24`   - [ ] 17. AWS re:Invent 2017: Best Practices for Distributed Machine Learning and Predictive A (ABD403) `1:16:16`   - [ ] 18. AWS re:Invent 2017: GPS: Enhancing Customer Security Using AI/ML on AWS (GPSTEC311) `50:21`   - [ ] 19. How to Wrangle Data for Machine Learning on AWS `59:24`   - [ ] 20. Extract Data from Images and Videos with Amazon Rekognition (Level 300) `26:52`   - [ ] 21. Exploring the Business Use Cases for Amazon Machine Learning - 2017 AWS Online Tech Talks `30:35`   - [ ] 22. AWS re:Invent 2017: Orchestrating Machine Learning Training for Netflix Recommendation (MCL317) `54:21`   - [ ] 23. AWS re:Invent 2017: Reinforcement Learning - The Ultimate AI (ARC320) `1:00:00`   - [ ] 24. Amazon Machine Learning: Empowering Developers to Build Smart Applications `55:09`   - [ ] 25. Amazon SageMaker's Built-in Algorithm Webinar Series: DeepAR Forecasting `53:41`   - [ ] 26. Amazon SageMaker's Built-in Algorithm Webinar Series: Linear Learner `58:55`   - [ ] 27. Amazon SageMaker's Built-in Algorithm Webinar Series: Clustering with K Means `58:52`   - [ ] 28. Amazon SageMaker's Built-in Algorithm Webinar Series: Latent Dirichlet Allocation (LDA) `57:25`   - [ ] 29. Amazon SageMaker's Built-in Algorithm Webinar Series: XGBoost `1:01:02`   - [ ] 30. Amazon SageMaker's Built-in Algorithm Webinar Series: ResNet `55:56`   - [ ] 31. Amazon SageMaker-s Built-in Algorithm Webinar Series: Blazing Text `1:14:37`   - [ ] 32. AWS re:Invent 2017: NEW LAUNCH! Introducing Amazon SageMaker (MCL365) `1:02:08`   - [ ] 33. Fully Managed Notebook Instances with Amazon SageMaker - a Deep Dive `16:45`   - [ ] 34. Built-in Machine Learning Algorithms with Amazon SageMaker -  a Deep Dive `15:38` - [ ] [Machine Learning with TensorFlow on Google Cloud Platform Specialization](https://www.coursera.org/specializations/machine-learning-tensorflow-gcp) by Google Cloud Training   - [ ] Course 1: How Google does Machine Learning     - [ ] 1. Introduction to Course     - [ ] 2. What It Means to Be AI First     - [ ] 3. How Google Does ML     - [ ] 4. Inclusive ML     - [ ] 5. Python Notebooks in the Cloud     - [ ] 6. Summary   - [ ] Course 2: Launching into Machine Learning     - [ ] 1. Introduction to Course     - [ ] 2. Improve Data Quality and Exploratory Data Analysis     - [ ] 3. Practical ML     - [ ] 4. Optimization     - [ ] 5. Generalization and Sampling     - [ ] 6. Summary   - [ ] Course 3: Introduction to TensorFlow     - [ ] 1. Introduction to Course     - [ ] 2. Introduction to TensorFlow     - [ ] 3. Design and Build a TensorFlow Input Data Pipeline     - [ ] 4. Training Neural Networks with TensorFlow 2 and the Keras Sequential API     - [ ] 5. Training Neural Networks with TensorFlow 2 and the Keras Functional API     - [ ] 6. Summary   - [ ] Course 4: Feature Engineering     - [ ] 1. Introduction to Course     - [ ] 2. Raw Data to Features     - [ ] 3. Preprocessing and Feature Creation     - [ ] 4. Feature Crosses     - [ ] 5. TensorFlow Transform     - [ ] 6. Summary   - [ ] Course 5: Art and Science of Machine Learning     - [ ] 1. Introduction     - [ ] 2. The Art of ML     - [ ] 3. Hyperparameter Tuning     - [ ] 4. A Pinch of Science     - [ ] 5. The Science of Neural Networks     - [ ] 6. Embeddings     - [ ] 7. Summary",
    "stars": 40,
    "language": null,
    "updated": "2025-05-21",
    "topics": []
  },
  {
    "name": "vulnseer",
    "full_name": "nullenc0de/vulnseer",
    "url": "https://github.com/nullenc0de/vulnseer",
    "description": "VulnSeer combines the power of Nmap's service detection with multiple AI providers to deliver intelligent vulnerability assessments. Unlike traditional scanners that rely on static databases, VulnSeer leverages AI to provide contextual analysis of discovered services and their potential security risks.",
    "stars": 37,
    "language": "Python",
    "updated": "2025-06-30",
    "topics": []
  },
  {
    "name": "alder-security-scanner",
    "full_name": "Adamsmith6300/alder-security-scanner",
    "url": "https://github.com/Adamsmith6300/alder-security-scanner",
    "description": "An AI-powered security analysis tool for web applications that combines Large Language Model (LLM) analysis with intelligent agent-based verification to identify and validate security vulnerabilities in your codebase.",
    "stars": 34,
    "language": "Python",
    "updated": "2025-06-14",
    "topics": []
  },
  {
    "name": "TTPMapper",
    "full_name": "infosecn1nja/TTPMapper",
    "url": "https://github.com/infosecn1nja/TTPMapper",
    "description": "TTPMapper is an AI-driven threat intelligence parser that converts unstructured reports whether from web URLs or PDF files into structured intelligence. Using the DeepSeek LLM, it extracts MITRE ATT&CK techniques, IOCs, threat actors, and generates contextual summaries.",
    "stars": 33,
    "language": "Python",
    "updated": "2025-06-30",
    "topics": [
      "blueteam",
      "cybersecurity",
      "deepseek-chat",
      "mitre-attack",
      "threat-intelligence"
    ]
  },
  {
    "name": "BottleNetes",
    "full_name": "oslabs-beta/BottleNetes",
    "url": "https://github.com/oslabs-beta/BottleNetes",
    "description": "A web-based Kubernetes dashboard that streamlines resource allocation, DevOps management, security monitoring, and pod diagnostics. Harness AI-driven insights, fleet-wide heatmaps, and real-time/historical data analysis to help teams optimize performance and scale effortlessly.",
    "stars": 33,
    "language": "TypeScript",
    "updated": "2025-05-21",
    "topics": []
  },
  {
    "name": "Wazuh-MCP-Server",
    "full_name": "gensecaihq/Wazuh-MCP-Server",
    "url": "https://github.com/gensecaihq/Wazuh-MCP-Server",
    "description": " AI-powered security operations with Wazuh SIEM + Claude Desktop. Natural language threat detection, automated incident response & compliance. 14 security tools, real-time monitoring, ML anomaly detection. Transform your SOC with conversational security analysis. Production-ready MCP server.",
    "stars": 32,
    "language": "Python",
    "updated": "2025-06-27",
    "topics": [
      "ai",
      "claude",
      "claude-ai",
      "claude-code",
      "claudedxt",
      "dxt",
      "genai",
      "mcp",
      "mcp-server",
      "mcpserver",
      "model-context-protocol",
      "model-context-protocol-servers",
      "python",
      "wazuh",
      "wazuh-integration"
    ]
  },
  {
    "name": "Artificial-Intelligence-based-Online-Exam-Proctoring-System",
    "full_name": "krishnakumaragrawal/Artificial-Intelligence-based-Online-Exam-Proctoring-System",
    "url": "https://github.com/krishnakumaragrawal/Artificial-Intelligence-based-Online-Exam-Proctoring-System",
    "description": "AI based Online Exam Proctoring System is an innovative project designed to maintain the integrity and security of online exams using Python and Computer Vision. ",
    "stars": 29,
    "language": "Python",
    "updated": "2025-06-29",
    "topics": [
      "artificial-intelligence",
      "computer-vision",
      "proctoring-ai",
      "python"
    ]
  },
  {
    "name": "plot4ai-library",
    "full_name": "PLOT4ai/plot4ai-library",
    "url": "https://github.com/PLOT4ai/plot4ai-library",
    "description": "Practical Library Of Threats 4 Artificial Intelligence",
    "stars": 28,
    "language": "PHP",
    "updated": "2025-06-25",
    "topics": [
      "artificial-intelligence",
      "machine-learning",
      "privacy",
      "threat-modeling"
    ]
  },
  {
    "name": "XSSInspector-SecurityToolkit-AI-ML",
    "full_name": "haroonawanofficial/XSSInspector-SecurityToolkit-AI-ML",
    "url": "https://github.com/haroonawanofficial/XSSInspector-SecurityToolkit-AI-ML",
    "description": "World's first Artificial Intelligence (XSS) Cross Site Scripting powered by Machine Learning with extreme fine-tuning designed to detect Reflected, Stored, DOM, and Blind (XSS) vulnerabilities in servers/apps at RFC design, forms, crawls, and through advanced AI techniques with deep and reinforcement learning, (NLP) and automatic payload generation",
    "stars": 27,
    "language": "Python",
    "updated": "2025-06-12",
    "topics": []
  },
  {
    "name": "Other-sources",
    "full_name": "Aryia-Behroziuan/Other-sources",
    "url": "https://github.com/Aryia-Behroziuan/Other-sources",
    "description": "Asada, M.; Hosoda, K.; Kuniyoshi, Y.; Ishiguro, H.; Inui, T.; Yoshikawa, Y.; Ogino, M.; Yoshida, C. (2009). \"Cognitive developmental robotics: a survey\". IEEE Transactions on Autonomous Mental Development. 1 (1): 12\u201334. doi:10.1109/tamd.2009.2021702. S2CID 10168773. \"ACM Computing Classification System: Artificial intelligence\". ACM. 1998. Archived from the original on 12 October 2007. Retrieved 30 August 2007. Goodman, Joanna (2016). Robots in Law: How Artificial Intelligence is Transforming Legal Services (1st ed.). Ark Group. ISBN 978-1-78358-264-8. Archived from the original on 8 November 2016. Retrieved 7 November 2016. Albus, J. S. (2002). \"4-D/RCS: A Reference Model Architecture for Intelligent Unmanned Ground Vehicles\" (PDF). In Gerhart, G.; Gunderson, R.; Shoemaker, C. (eds.). Proceedings of the SPIE AeroSense Session on Unmanned Ground Vehicle Technology. Unmanned Ground Vehicle Technology IV. 3693. pp. 11\u201320. Bibcode:2002SPIE.4715..303A. CiteSeerX 10.1.1.15.14. doi:10.1117/12.474462. S2CID 63339739. Archived from the original (PDF) on 25 July 2004. Aleksander, Igor (1995). Artificial Neuroconsciousness: An Update. IWANN. Archived from the original on 2 March 1997. BibTex Archived 2 March 1997 at the Wayback Machine. Bach, Joscha (2008). \"Seven Principles of Synthetic Intelligence\". In Wang, Pei; Goertzel, Ben; Franklin, Stan (eds.). Artificial General Intelligence, 2008: Proceedings of the First AGI Conference. IOS Press. pp. 63\u201374. ISBN 978-1-58603-833-5. Archived from the original on 8 July 2016. Retrieved 16 February 2016. \"Robots could demand legal rights\". BBC News. 21 December 2006. Archived from the original on 15 October 2019. Retrieved 3 February 2011. Brooks, Rodney (1990). \"Elephants Don't Play Chess\" (PDF). Robotics and Autonomous Systems. 6 (1\u20132): 3\u201315. CiteSeerX 10.1.1.588.7539. doi:10.1016/S0921-8890(05)80025-9. Archived (PDF) from the original on 9 August 2007. Brooks, R. A. (1991). \"How to build complete creatures rather than isolated cognitive simulators\". In VanLehn, K. (ed.). Architectures for Intelligence. Hillsdale, NJ: Lawrence Erlbaum Associates. pp. 225\u2013239. CiteSeerX 10.1.1.52.9510. Buchanan, Bruce G. (2005). \"A (Very) Brief History of Artificial Intelligence\" (PDF). AI Magazine: 53\u201360. Archived from the original (PDF) on 26 September 2007. Butler, Samuel (13 June 1863). \"Darwin among the Machines\". Letters to the Editor. The Press. Christchurch, New Zealand. Archived from the original on 19 September 2008. Retrieved 16 October 2014 \u2013 via Victoria University of Wellington. Clark, Jack (8 December 2015). \"Why 2015 Was a Breakthrough Year in Artificial Intelligence\". Bloomberg News. Archived from the original on 23 November 2016. Retrieved 23 November 2016. After a half-decade of quiet breakthroughs in artificial intelligence, 2015 has been a landmark year. Computers are smarter and learning faster than ever. \"AI set to exceed human brain power\". CNN. 26 July 2006. Archived from the original on 19 February 2008. Dennett, Daniel (1991). Consciousness Explained. The Penguin Press. ISBN 978-0-7139-9037-9. Domingos, Pedro (2015). The Master Algorithm: How the Quest for the Ultimate Learning Machine Will Remake Our World. Basic Books. ISBN 978-0-465-06192-1. Dowe, D. L.; Hajek, A. R. (1997). \"A computational extension to the Turing Test\". Proceedings of the 4th Conference of the Australasian Cognitive Science Society. Archived from the original on 28 June 2011. Dreyfus, Hubert (1972). What Computers Can't Do. New York: MIT Press. ISBN 978-0-06-011082-6. Dreyfus, Hubert; Dreyfus, Stuart (1986). Mind over Machine: The Power of Human Intuition and Expertise in the Era of the Computer. Oxford, UK: Blackwell. ISBN 978-0-02-908060-3. Archived from the original on 26 July 2020. Retrieved 22 August 2020. Dreyfus, Hubert (1992). What Computers Still Can't Do. New York: MIT Press. ISBN 978-0-262-54067-4. Dyson, George (1998). Darwin among the Machines. Allan Lane Science. ISBN 978-0-7382-0030-9. Archived from the original on 26 July 2020. Retrieved 22 August 2020. Edelman, Gerald (23 November 2007). \"Gerald Edelman \u2013 Neural Darwinism and Brain-based Devices\". Talking Robots. Archived from the original on 8 October 2009. Edelson, Edward (1991). The Nervous System. New York: Chelsea House. ISBN 978-0-7910-0464-7. Archived from the original on 26 July 2020. Retrieved 18 November 2019. Fearn, Nicholas (2007). The Latest Answers to the Oldest Questions: A Philosophical Adventure with the World's Greatest Thinkers. New York: Grove Press. ISBN 978-0-8021-1839-4. Gladwell, Malcolm (2005). Blink. New York: Little, Brown and Co. ISBN 978-0-316-17232-5. G\u00f6del, Kurt (1951). Some basic theorems on the foundations of mathematics and their implications. Gibbs Lecture. In Feferman, Solomon, ed. (1995). Kurt G\u00f6del: Collected Works, Vol. III: Unpublished Essays and Lectures. Oxford University Press. pp. 304\u201323. ISBN 978-0-19-514722-3. Haugeland, John (1985). Artificial Intelligence: The Very Idea. Cambridge, Mass.: MIT Press. ISBN 978-0-262-08153-5. Hawkins, Jeff; Blakeslee, Sandra (2005). On Intelligence. New York, NY: Owl Books. ISBN 978-0-8050-7853-4. Henderson, Mark (24 April 2007). \"Human rights for robots? We're getting carried away\". The Times Online. London. Archived from the original on 31 May 2014. Retrieved 31 May 2014. Hernandez-Orallo, Jose (2000). \"Beyond the Turing Test\". Journal of Logic, Language and Information. 9 (4): 447\u2013466. doi:10.1023/A:1008367325700. S2CID 14481982. Hernandez-Orallo, J.; Dowe, D. L. (2010). \"Measuring Universal Intelligence: Towards an Anytime Intelligence Test\". Artificial Intelligence. 174 (18): 1508\u20131539. CiteSeerX 10.1.1.295.9079. doi:10.1016/j.artint.2010.09.006. Hinton, G. E. (2007). \"Learning multiple layers of representation\". Trends in Cognitive Sciences. 11 (10): 428\u2013434. doi:10.1016/j.tics.2007.09.004. PMID 17921042. S2CID 15066318. Hofstadter, Douglas (1979). G\u00f6del, Escher, Bach: an Eternal Golden Braid. New York, NY: Vintage Books. ISBN 978-0-394-74502-2. Holland, John H. (1975). Adaptation in Natural and Artificial Systems. University of Michigan Press. ISBN 978-0-262-58111-0. Archived from the original on 26 July 2020. Retrieved 17 December 2019. Howe, J. (November 1994). \"Artificial Intelligence at Edinburgh University: a Perspective\". Archived from the original on 15 May 2007. Retrieved 30 August 2007. Hutter, M. (2012). \"One Decade of Universal Artificial Intelligence\". Theoretical Foundations of Artificial General Intelligence. Atlantis Thinking Machines. 4. pp. 67\u201388. CiteSeerX 10.1.1.228.8725. doi:10.2991/978-94-91216-62-6_5. ISBN 978-94-91216-61-9. S2CID 8888091. Kahneman, Daniel; Slovic, D.; Tversky, Amos (1982). Judgment under uncertainty: Heuristics and biases. Science. 185. New York: Cambridge University Press. pp. 1124\u201331. doi:10.1126/science.185.4157.1124. ISBN 978-0-521-28414-1. PMID 17835457. S2CID 143452957. Kaplan, Andreas; Haenlein, Michael (2019). \"Siri, Siri in my Hand, who's the Fairest in the Land? On the Interpretations, Illustrations and Implications of Artificial Intelligence\". Business Horizons. 62: 15\u201325. doi:10.1016/j.bushor.2018.08.004. Katz, Yarden (1 November 2012). \"Noam Chomsky on Where Artificial Intelligence Went Wrong\". The Atlantic. Archived from the original on 28 February 2019. Retrieved 26 October 2014. \"Kismet\". MIT Artificial Intelligence Laboratory, Humanoid Robotics Group. Archived from the original on 17 October 2014. Retrieved 25 October 2014. Koza, John R. (1992). Genetic Programming (On the Programming of Computers by Means of Natural Selection). MIT Press. Bibcode:1992gppc.book.....K. ISBN 978-0-262-11170-6. Kolata, G. (1982). \"How can computers get common sense?\". Science. 217 (4566): 1237\u20131238. Bibcode:1982Sci...217.1237K. doi:10.1126/science.217.4566.1237. PMID 17837639. Kumar, Gulshan; Kumar, Krishan (2012). \"The Use of Artificial-Intelligence-Based Ensembles for Intrusion Detection: A Review\". Applied Computational Intelligence and Soft Computing. 2012: 1\u201320. doi:10.1155/2012/850160. Kurzweil, Ray (1999). The Age of Spiritual Machines. Penguin Books. ISBN 978-0-670-88217-5. Kurzweil, Ray (2005). The Singularity is Near. Penguin Books. ISBN 978-0-670-03384-3. Lakoff, George; N\u00fa\u00f1ez, Rafael E. (2000). Where Mathematics Comes From: How the Embodied Mind Brings Mathematics into Being. Basic Books. ISBN 978-0-465-03771-1. Langley, Pat (2011). \"The changing science of machine learning\". Machine Learning. 82 (3): 275\u2013279. doi:10.1007/s10994-011-5242-y. Law, Diane (June 1994). Searle, Subsymbolic Functionalism and Synthetic Intelligence (Technical report). University of Texas at Austin. p. AI94-222. CiteSeerX 10.1.1.38.8384. Legg, Shane; Hutter, Marcus (15 June 2007). A Collection of Definitions of Intelligence (Technical report). IDSIA. arXiv:0706.3639. Bibcode:2007arXiv0706.3639L. 07-07. Lenat, Douglas; Guha, R. V. (1989). Building Large Knowledge-Based Systems. Addison-Wesley. ISBN 978-0-201-51752-1. Lighthill, James (1973). \"Artificial Intelligence: A General Survey\". Artificial Intelligence: a paper symposium. Science Research Council. Lucas, John (1961). \"Minds, Machines and G\u00f6del\". In Anderson, A.R. (ed.). Minds and Machines. Archived from the original on 19 August 2007. Retrieved 30 August 2007. Lungarella, M.; Metta, G.; Pfeifer, R.; Sandini, G. (2003). \"Developmental robotics: a survey\". Connection Science. 15 (4): 151\u2013190. CiteSeerX 10.1.1.83.7615. doi:10.1080/09540090310001655110. S2CID 1452734. Maker, Meg Houston (2006). \"AI@50: AI Past, Present, Future\". Dartmouth College. Archived from the original on 3 January 2007. Retrieved 16 October 2008. Markoff, John (16 February 2011). \"Computer Wins on 'Jeopardy!': Trivial, It's Not\". The New York Times. Archived from the original on 22 October 2014. Retrieved 25 October 2014. McCarthy, John; Minsky, Marvin; Rochester, Nathan; Shannon, Claude (1955). \"A Proposal for the Dartmouth Summer Research Project on Artificial Intelligence\". Archived from the original on 26 August 2007. Retrieved 30 August 2007.. McCarthy, John; Hayes, P. J. (1969). \"Some philosophical problems from the standpoint of artificial intelligence\". Machine Intelligence. 4: 463\u2013502. CiteSeerX 10.1.1.85.5082. Archived from the original on 10 August 2007. Retrieved 30 August 2007. McCarthy, John (12 November 2007). \"What Is Artificial Intelligence?\". Archived from the original on 18 November 2015. Minsky, Marvin (1967). Computation: Finite and Infinite Machines. Englewood Cliffs, N.J.: Prentice-Hall. ISBN 978-0-13-165449-5. Archived from the original on 26 July 2020. Retrieved 18 November 2019. Minsky, Marvin (2006). The Emotion Machine. New York, NY: Simon & Schusterl. ISBN 978-0-7432-7663-4. Moravec, Hans (1988). Mind Children. Harvard University Press. ISBN 978-0-674-57616-2. Archived from the original on 26 July 2020. Retrieved 18 November 2019. Norvig, Peter (25 June 2012). \"On Chomsky and the Two Cultures of Statistical Learning\". Peter Norvig. Archived from the original on 19 October 2014. NRC (United States National Research Council) (1999). \"Developments in Artificial Intelligence\". Funding a Revolution: Government Support for Computing Research. National Academy Press. Needham, Joseph (1986). Science and Civilization in China: Volume 2. Caves Books Ltd. Newell, Allen; Simon, H. A. (1976). \"Computer Science as Empirical Inquiry: Symbols and Search\". Communications of the ACM. 19 (3): 113\u2013126. doi:10.1145/360018.360022.. Nilsson, Nils (1983). \"Artificial Intelligence Prepares for 2001\" (PDF). AI Magazine. 1 (1). Archived (PDF) from the original on 17 August 2020. Retrieved 22 August 2020. Presidential Address to the Association for the Advancement of Artificial Intelligence. O'Brien, James; Marakas, George (2011). Management Information Systems (10th ed.). McGraw-Hill/Irwin. ISBN 978-0-07-337681-3. O'Connor, Kathleen Malone (1994). \"The alchemical creation of life (takwin) and other concepts of Genesis in medieval Islam\". University of Pennsylvania: 1\u2013435. Archived from the original on 5 December 2019. Retrieved 27 August 2008. Oudeyer, P-Y. (2010). \"On the impact of robotics in behavioral and cognitive sciences: from insect navigation to human cognitive development\" (PDF). IEEE Transactions on Autonomous Mental Development. 2 (1): 2\u201316. doi:10.1109/tamd.2009.2039057. S2CID 6362217. Archived (PDF) from the original on 3 October 2018. Retrieved 4 June 2013. Penrose, Roger (1989). The Emperor's New Mind: Concerning Computer, Minds and The Laws of Physics. Oxford University Press. ISBN 978-0-19-851973-7. Poli, R.; Langdon, W. B.; McPhee, N. F. (2008). A Field Guide to Genetic Programming. Lulu.com. ISBN 978-1-4092-0073-4. Archived from the original on 8 August 2015. Retrieved 21 April 2008 \u2013 via gp-field-guide.org.uk. Rajani, Sandeep (2011). \"Artificial Intelligence \u2013 Man or Machine\" (PDF). International Journal of Information Technology and Knowledge Management. 4 (1): 173\u2013176. Archived from the original (PDF) on 18 January 2013. Ronald, E. M. A. and Sipper, M. Intelligence is not enough: On the socialization of talking machines, Minds and Machines Archived 25 July 2020 at the Wayback Machine, vol. 11, no. 4, pp. 567\u2013576, November 2001. Ronald, E. M. A. and Sipper, M. What use is a Turing chatterbox? Archived 25 July 2020 at the Wayback Machine, Communications of the ACM, vol. 43, no. 10, pp. 21\u201323, October 2000. \"Science\". August 1982. Archived from the original on 25 July 2020. Retrieved 16 February 2016. Searle, John (1980). \"Minds, Brains and Programs\" (PDF). Behavioral and Brain Sciences. 3 (3): 417\u2013457. doi:10.1017/S0140525X00005756. Archived (PDF) from the original on 17 March 2019. Retrieved 22 August 2020. Searle, John (1999). Mind, language and society. New York, NY: Basic Books. ISBN 978-0-465-04521-1. OCLC 231867665. Archived from the original on 26 July 2020. Retrieved 22 August 2020. Shapiro, Stuart C. (1992). \"Artificial Intelligence\". In Shapiro, Stuart C. (ed.). Encyclopedia of Artificial Intelligence (PDF) (2nd ed.). New York: John Wiley. pp. 54\u201357. ISBN 978-0-471-50306-4. Archived (PDF) from the original on 1 February 2016. Retrieved 29 May 2009. Simon, H. A. (1965). The Shape of Automation for Men and Management. New York: Harper & Row. Archived from the original on 26 July 2020. Retrieved 18 November 2019. Skillings, Jonathan (3 July 2006). \"Getting Machines to Think Like Us\". cnet. Archived from the original on 16 November 2011. Retrieved 3 February 2011. Solomonoff, Ray (1956). An Inductive Inference Machine (PDF). Dartmouth Summer Research Conference on Artificial Intelligence. Archived (PDF) from the original on 26 April 2011. Retrieved 22 March 2011 \u2013 via std.com, pdf scanned copy of the original. Later published as Solomonoff, Ray (1957). \"An Inductive Inference Machine\". IRE Convention Record. Section on Information Theory, part 2. pp. 56\u201362. Tao, Jianhua; Tan, Tieniu (2005). Affective Computing and Intelligent Interaction. Affective Computing: A Review. LNCS 3784. Springer. pp. 981\u2013995. doi:10.1007/11573548. Tecuci, Gheorghe (March\u2013April 2012). \"Artificial Intelligence\". Wiley Interdisciplinary Reviews: Computational Statistics. 4 (2): 168\u2013180. doi:10.1002/wics.200. Thro, Ellen (1993). Robotics: The Marriage of Computers and Machines. New York: Facts on File. ISBN 978-0-8160-2628-9. Archived from the original on 26 July 2020. Retrieved 22 August 2020. Turing, Alan (October 1950), \"Computing Machinery and Intelligence\", Mind, LIX (236): 433\u2013460, doi:10.1093/mind/LIX.236.433, ISSN 0026-4423. van der Walt, Christiaan; Bernard, Etienne (2006). \"Data characteristics that determine classifier performance\" (PDF). Archived from the original (PDF) on 25 March 2009. Retrieved 5 August 2009. Vinge, Vernor (1993). \"The Coming Technological Singularity: How to Survive in the Post-Human Era\". Vision 21: Interdisciplinary Science and Engineering in the Era of Cyberspace: 11. Bibcode:1993vise.nasa...11V. Archived from the original on 1 January 2007. Retrieved 14 November 2011. Wason, P. C.; Shapiro, D. (1966). \"Reasoning\". In Foss, B. M. (ed.). New horizons in psychology. Harmondsworth: Penguin. Archived from the original on 26 July 2020. Retrieved 18 November 2019. Weizenbaum, Joseph (1976). Computer Power and Human Reason. San Francisco: W.H. Freeman & Company. ISBN 978-0-7167-0464-5. Weng, J.; McClelland; Pentland, A.; Sporns, O.; Stockman, I.; Sur, M.; Thelen, E. (2001). \"Autonomous mental development by robots and animals\" (PDF). Science. 291 (5504): 599\u2013600. doi:10.1126/science.291.5504.599. PMID 11229402. S2CID 54131797. Archived (PDF) from the original on 4 September 2013. Retrieved 4 June 2013 \u2013 via msu.edu. \"Applications of AI\". www-formal.stanford.edu. Archived from the original on 28 August 2016. Retrieved 25 September 2016. Further reading DH Author, 'Why Are There Still So Many Jobs? The History and Future of Workplace Automation' (2015) 29(3) Journal of Economic Perspectives 3. Boden, Margaret, Mind As Machine, Oxford University Press, 2006. Cukier, Kenneth, \"Ready for Robots? How to Think about the Future of AI\", Foreign Affairs, vol. 98, no. 4 (July/August 2019), pp. 192\u201398. George Dyson, historian of computing, writes (in what might be called \"Dyson's Law\") that \"Any system simple enough to be understandable will not be complicated enough to behave intelligently, while any system complicated enough to behave intelligently will be too complicated to understand.\" (p. 197.) Computer scientist Alex Pentland writes: \"Current AI machine-learning algorithms are, at their core, dead simple stupid. They work, but they work by brute force.\" (p. 198.) Domingos, Pedro, \"Our Digital Doubles: AI will serve our species, not control it\", Scientific American, vol. 319, no. 3 (September 2018), pp. 88\u201393. Gopnik, Alison, \"Making AI More Human: Artificial intelligence has staged a revival by starting to incorporate what we know about how children learn\", Scientific American, vol. 316, no. 6 (June 2017), pp. 60\u201365. Johnston, John (2008) The Allure of Machinic Life: Cybernetics, Artificial Life, and the New AI, MIT Press. Koch, Christof, \"Proust among the Machines\", Scientific American, vol. 321, no. 6 (December 2019), pp. 46\u201349. Christof Koch doubts the possibility of \"intelligent\" machines attaining consciousness, because \"[e]ven the most sophisticated brain simulations are unlikely to produce conscious feelings.\" (p. 48.) According to Koch, \"Whether machines can become sentient [is important] for ethical reasons. If computers experience life through their own senses, they cease to be purely a means to an end determined by their usefulness to... humans. Per GNW [the Global Neuronal Workspace theory], they turn from mere objects into subjects... with a point of view.... Once computers' cognitive abilities rival those of humanity, their impulse to push for legal and political rights will become irresistible \u2013 the right not to be deleted, not to have their memories wiped clean, not to suffer pain and degradation. The alternative, embodied by IIT [Integrated Information Theory], is that computers will remain only supersophisticated machinery, ghostlike empty shells, devoid of what we value most: the feeling of life itself.\" (p. 49.) Marcus, Gary, \"Am I Human?: Researchers need new ways to distinguish artificial intelligence from the natural kind\", Scientific American, vol. 316, no. 3 (March 2017), pp. 58\u201363. A stumbling block to AI has been an incapacity for reliable disambiguation. An example is the \"pronoun disambiguation problem\": a machine has no way of determining to whom or what a pronoun in a sentence refers. (p. 61.) E McGaughey, 'Will Robots Automate Your Job Away? Full Employment, Basic Income, and Economic Democracy' (2018) SSRN, part 2(3) Archived 24 May 2018 at the Wayback Machine. George Musser, \"Artificial Imagination: How machines could learn creativity and common sense, among other human qualities\", Scientific American, vol. 320, no. 5 (May 2019), pp. 58\u201363. Myers, Courtney Boyd ed. (2009). \"The AI Report\" Archived 29 July 2017 at the Wayback Machine. Forbes June 2009 Raphael, Bertram (1976). The Thinking Computer. W.H.Freeman and Company. ISBN 978-0-7167-0723-3. Archived from the original on 26 July 2020. Retrieved 22 August 2020. Scharre, Paul, \"Killer Apps: The Real Dangers of an AI Arms Race\", Foreign Affairs, vol. 98, no. 3 (May/June 2019), pp. 135\u201344. \"Today's AI technologies are powerful but unreliable. Rules-based systems cannot deal with circumstances their programmers did not anticipate. Learning systems are limited by the data on which they were trained. AI failures have already led to tragedy. Advanced autopilot features in cars, although they perform well in some circumstances, have driven cars without warning into trucks, concrete barriers, and parked cars. In the wrong situation, AI systems go from supersmart to superdumb in an instant. When an enemy is trying to manipulate and hack an AI system, the risks are even greater.\" (p. 140.) Serenko, Alexander (2010). \"The development of an AI journal ranking based on the revealed preference approach\" (PDF). Journal of Informetrics. 4 (4): 447\u2013459. doi:10.1016/j.joi.2010.04.001. Archived (PDF) from the original on 4 October 2013. Retrieved 24 August 2013. Serenko, Alexander; Michael Dohan (2011). \"Comparing the expert survey and citation impact journal ranking methods: Example from the field of Artificial Intelligence\" (PDF). Journal of Informetrics. 5 (4): 629\u2013649. doi:10.1016/j.joi.2011.06.002. Archived (PDF) from the original on 4 October 2013. Retrieved 12 September 2013. Sun, R. & Bookman, L. (eds.), Computational Architectures: Integrating Neural and Symbolic Processes. Kluwer Academic Publishers, Needham, MA. 1994. Tom Simonite (29 December 2014). \"2014 in Computing: Breakthroughs in Artificial Intelligence\". MIT Technology Review. Tooze, Adam, \"Democracy and Its Discontents\", The New York Review of Books, vol. LXVI, no. 10 (6 June 2019), pp. 52\u201353, 56\u201357. \"Democracy has no clear answer for the mindless operation of bureaucratic and technological power. We may indeed be witnessing its extension in the form of artificial intelligence and robotics. Likewise, after decades of dire warning, the environmental problem remains fundamentally unaddressed.... Bureaucratic overreach and environmental catastrophe are precisely the kinds of slow-moving existential challenges that democracies deal with very badly.... Finally, there is the threat du jour: corporations and the technologies they promote.\" (pp. 56\u201357.)",
    "stars": 22,
    "language": null,
    "updated": "2025-06-16",
    "topics": []
  },
  {
    "name": "Artificial-Intelligence",
    "full_name": "manjunath5496/Artificial-Intelligence",
    "url": "https://github.com/manjunath5496/Artificial-Intelligence",
    "description": "\"The real problem is not the existential threat of AI. Instead, it is in the development of ethical AI systems.\" \u2015 Rana El Kaliouby",
    "stars": 21,
    "language": null,
    "updated": "2025-01-31",
    "topics": []
  },
  {
    "name": "android-scanner-ai",
    "full_name": "X-Vector/android-scanner-ai",
    "url": "https://github.com/X-Vector/android-scanner-ai",
    "description": "A powerful static analysis tool that uses AI to scan Android APK files for security vulnerabilities and potential issues. The scanner decompiles APK files and analyzes the source code, manifest, and resource files using AI models.",
    "stars": 21,
    "language": "Python",
    "updated": "2025-06-29",
    "topics": []
  },
  {
    "name": "FCNPC-AI",
    "full_name": "WoutProvost/FCNPC-AI",
    "url": "https://github.com/WoutProvost/FCNPC-AI",
    "description": "A SA-MP library that adds a simple targeting and threat artificial intelligence system to the NPCs",
    "stars": 16,
    "language": "Pawn",
    "updated": "2025-01-09",
    "topics": [
      "include",
      "pawn",
      "pawn-package",
      "sa-mp",
      "sa-mp-library"
    ]
  },
  {
    "name": "GenAI-STIX2.1-Generator",
    "full_name": "format81/GenAI-STIX2.1-Generator",
    "url": "https://github.com/format81/GenAI-STIX2.1-Generator",
    "description": "GenAI-STIX2.1-Generator is a tool that leverages Azure OpenAI capabilities to transform threat intelligence reports from unstructured web input into structured STIX 2.1 format.",
    "stars": 16,
    "language": "Jupyter Notebook",
    "updated": "2025-05-27",
    "topics": []
  },
  {
    "name": "Smart-Monitor-An-AI-Powered-IoT-Monitoring-System-for-Small-Medium-Scale-Premises",
    "full_name": "BernardNyarko/Smart-Monitor-An-AI-Powered-IoT-Monitoring-System-for-Small-Medium-Scale-Premises",
    "url": "https://github.com/BernardNyarko/Smart-Monitor-An-AI-Powered-IoT-Monitoring-System-for-Small-Medium-Scale-Premises",
    "description": "With recent advances in both Artificial Intelligence (AI) and Internet of Things (IoT) capabilities, it is more possible than ever to implement surveillance systems that can automatically identify people who might represent a potential security threat to the public in real-time. Imagine a surveillance camera system that can detect various on-body weapons, suspicious objects, and traffic. This system could transform surveillance cameras from passive sentries into active observers, which would help prevent a possible mass shooting in a school, stadium, or mall. In this project, we tried to realize such systems by implementing Smart-Monitor, an AI-powered threat detector for intelligent surveillance cameras. The developed system can be deployed locally on the surveillance cameras at the network edge. Deploying AI-enabled surveillance applications at the edge enables the initial analysis of the captured images on-site, reducing the communication overheads and enabling swift security actions. We developed a mobile app that users can detect suspicious objects in an image and video captured by several cameras at the network edge. Also, the model can generate a high-quality segmentation mask for each object instance in the photo, along with the confidence percentage. The camera side used a Raspberry Pi 4 device, Neural Compute Stick 2 (NCS 2), Logitech C920 webcam, motion sensors, buzzers, pushbuttons, LED lights, Python Face recognition, and TensorFlow Custom Object Detection. When the system detects a motion in the surrounding environment, the motion sensors send a signal to the Raspberry Pi device notifying it to start capturing images for such physical activity. Using Python\u2019s face recognition and TensorFlow 2 custom object detection Smart-Monitor can recognize eight classes, including a baseball bat, bird, cat, dog, gun, hammer, knife, and human faces. Finally, we evaluated our system using various performance metrics such as classification time and accuracy, scalability, etc. ",
    "stars": 15,
    "language": "Jupyter Notebook",
    "updated": "2025-03-25",
    "topics": []
  },
  {
    "name": "Stahlfaust---Gomoku-AI-player",
    "full_name": "gomoku/Stahlfaust---Gomoku-AI-player",
    "url": "https://github.com/gomoku/Stahlfaust---Gomoku-AI-player",
    "description": "Stahlfaust is an AI player for the standard Gomoku game. It uses alpha-beta search, threat tree dbsearch and defensive search to provide a challenge to you. However, its not very fast... :-( The game was developed as term project for the Artificial Intelligence course of Professor Zhang Liqing at the Shanghai Jiaotong University by Marco Kunze and Sebastian Nowozin. ",
    "stars": 11,
    "language": "C#",
    "updated": "2024-08-02",
    "topics": []
  },
  {
    "name": "fastmcp-threatintel",
    "full_name": "4R9UN/fastmcp-threatintel",
    "url": "https://github.com/4R9UN/fastmcp-threatintel",
    "description": "AI-Powered Threat Intelligence MCP tool",
    "stars": 8,
    "language": "Python",
    "updated": "2025-06-28",
    "topics": [
      "mcp",
      "mcp-server",
      "mcp-tools",
      "threat-hunting",
      "threat-intelligence"
    ]
  },
  {
    "name": "Weapon-Detection-using-Artificial-Intelligence",
    "full_name": "GurpreetKukkar/Weapon-Detection-using-Artificial-Intelligence",
    "url": "https://github.com/GurpreetKukkar/Weapon-Detection-using-Artificial-Intelligence",
    "description": " AI-driven weapon detection system for real-time surveillance. Developed on TensorFlow, achieved precision of 0.8524 and 0.7006 at IoU 0.50 and 0.75. Utilizes key frame extraction and SSD-MobileNet, enhancing efficiency. Developed on Windows 10, Python 3.7.3, and TensorFlow 1.14.0. Boosts security with low-cost, automated threat recognition.",
    "stars": 7,
    "language": "Python",
    "updated": "2025-04-12",
    "topics": [
      "artificial-intelligence",
      "cybersecurity",
      "machine-learning",
      "single-shot-multibox-detector",
      "tensorflow",
      "weapon-detection"
    ]
  },
  {
    "name": "terraform-azure-sentinel",
    "full_name": "clouddrove/terraform-azure-sentinel",
    "url": "https://github.com/clouddrove/terraform-azure-sentinel",
    "description": "This terraform module is designed to create azure Sentinel resources.  Microsoft Sentinel natively incorporates proven Azure services, like Log Analytics and Logic Apps. Microsoft Sentinel enriches your investigation and detection with AI. It provides Microsoft's threat intelligence stream and enables you to bring your own threat intelligence",
    "stars": 6,
    "language": "HCL",
    "updated": "2024-12-23",
    "topics": [
      "azure",
      "azure-sentinel",
      "clouddrove",
      "hcl",
      "terraform",
      "terraform-azure",
      "terraform-azurerm",
      "terraform-module"
    ]
  },
  {
    "name": "DDoS-testing-server",
    "full_name": "sajeevan16/DDoS-testing-server",
    "url": "https://github.com/sajeevan16/DDoS-testing-server",
    "description": "APIs are exposed to the public or internal network interfaces, thus they are vulnerable to various security threats. Hackers can attack such APIs to steal sensitive data or to disrupt the services provided by APIs to the intended users. Therefore, API-based attack detection is important to identify and prevent fraudulent access to APIs. Since Machine learning (ML) and Artificial Intelligence (AI) have shown great potential in detecting abnormal patterns, AI is a useful tool in detecting attacks to the APIs. However, using AI/ML requires accurate data to learn the fraudulence patterns and to validate the developed solutions, which is a major challenge faced by data scientists and researchers. To address this challenge, we proposed an approach that learns to detect attacks using the generated data by attacking the APIs. Therefore, the solution will consist of two models for 1) attack detection, 2) attack generation. Assume if we want to detect DDOS attacks, the attack simulation model will try to simulate the DDOS attack without being detected by the attack detection model. If the attack is undetected and leads to the unavailability of the API, we can assign a penalty to attack detection model, and reward to the attacking model. We can allow both models to compete with each other similar to adversarial learning to achieve highly accurate attack detection models. This blogs [1] explains how adversarial learning is used to prevent attacks to the image recognition models. The goal of this project is to deliver an attack simulation and detection tool by improving adversarial learning approaches to simulate and detect API-based attacks.",
    "stars": 6,
    "language": "Python",
    "updated": "2024-11-14",
    "topics": []
  }
]